<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TechilaManagement</name>
    </assembly>
    <members>
        <member name="T:Techila.Management.Base">
            <summary>
            Base class for Manager implementations.
            </summary>
        </member>
        <member name="F:Techila.Management.Base.common">
            <summary>
            Common stuff. Holds data together.
            </summary>
        </member>
        <member name="F:Techila.Management.Base.logger">
            <summary>
            Logger instance.
            </summary>
        </member>
        <member name="F:Techila.Management.Base.CN">
            <summary>
             Classname for logging purposes.
            </summary>
        </member>
        <member name="M:Techila.Management.Base.#ctor(Techila.Management.Common,Techila.Management.Logger)">
            <summary>
            Construct a new instance.
            </summary>
            <param name="common">Common instance</param>
            <param name="log">Logger instance</param>
        </member>
        <member name="M:Techila.Management.Base.#ctor(Techila.Management.Common,Techila.Management.Logger,System.String)">
            <summary>
            Construct a new instance.
            </summary>
            <param name="common">Common instance</param>
            <param name="log">Logger instance</param>
            <param name="CN">Classname for logging purposes</param>
        </member>
        <member name="M:Techila.Management.Base.ParamSplitter(System.String[])">
            <summary>Split String array of "paramname=paramvalue" pairs into Dictionary.</summary>
            <param name="array">Array of "paramname=paramvalue" strings</param>
            <returns>Dictionary of paramname, paramvalue</returns>
        </member>
        <member name="M:Techila.Management.Base.ParamSplitter(System.String[],System.Boolean)">
            <summary>Split String array of "paramname=paramvalue" pairs into Dictionary.</summary>
            <param name="array">Array of "paramname=paramvalue" strings</param>
            <param name="files">filemode</param>
            <returns>Dictionary of paramname, paramvalue</returns>
        </member>
        <member name="M:Techila.Management.Base.ParamSplitter(System.Collections.Generic.List{System.String})">
            <summary>Split List of Strings of "paramname=paramvalue" into a Dictionary.</summary>
            <param name="list">List of "paramname=paramvalue" strings</param>
            <returns>Dictionary of paramname, paramvalue</returns>
        </member>
        <member name="P:Techila.Management.Base.Initialized">
            <summary>Has the library been initialized.</summary>
            <value>true if initialized or false otherwise</value>
        </member>
        <member name="P:Techila.Management.Base.Conn">
            <summary>Get the connection wrapper.</summary>
            <returns>the ConnectionWrapper</returns>
        </member>
        <member name="P:Techila.Management.Base.Poller">
            <summary>Get the Poller.</summary>
            <returns>the Poller</returns>
        </member>
        <member name="P:Techila.Management.Base.TempDir">
            <summary>Get the temporary directory.</summary>
            <value>String, path to temporary directory</value>
        </member>
        <member name="P:Techila.Management.Base.GM">
            <summary>
            Get Techila Manager.
            </summary>
            <value>Techila Manager</value>
        </member>
        <member name="M:Techila.Management.Base.ToString``2(System.Collections.Generic.List{``1})">
            <summary>
            Convert given List to String.
            </summary>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="data">Data to convert</param>
            <returns>String representation of the given List</returns>
        </member>
        <member name="M:Techila.Management.Base.ToString``2(CookComputing.XmlRpc.XmlRpcStruct)">
            <summary>
            Convert given XmlRpcStruct to String.
            </summary>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="data">Data to convert</param>
            <returns>String representation of the given XmlRpcStruct</returns>
        </member>
        <member name="M:Techila.Management.Base.ToString``2(System.Array)">
            <summary>
            Convert given Array to String.
            </summary>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="data">Data to convert</param>
            <returns>String representation of the given Array</returns>
        </member>
        <member name="M:Techila.Management.Base.ToString``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Convert given Dictionary to String.
            </summary>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="data">Data to convert</param>
            <returns>String representation of the given Dictionary</returns>
        </member>
        <member name="M:Techila.Management.Base.RenameColumns(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.String}},System.String,System.String)">
            <summary>
            Rename columns in the given list.
            </summary>
            <param name="list">The list</param>
            <param name="srcName">The column name to change</param>
            <param name="dstName">The new column name</param>
        </member>
        <member name="T:Techila.Management.BundleManager">
            <summary>
            Methods for bundle management.
            </summary>
        </member>
        <member name="M:Techila.Management.BundleManager.CreateBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String[])">
            <summary>
            Create a new bundle with given parameters and datafiles. Final bundle
            name will consist of the bundle prefix, user login name and the bundle
            name (prefix.user.name). The prefix is usually in the format of
            "fi.techila.grid.cust.[name].[program].clientmodule.client.data".
            If the bundleName is empty or null the name is generated automatically.
            </summary>
            <param name="handle">the handle</param>
            <param name="bundlePrefix">prefix of the bundle name</param>
            <param name="bundleName">name of the bundle (last part of the full name)</param>
            <param name="description">description of the bundle</param>
            <param name="bundleVersion">version of the bundle</param>
            <param name="imports">imports of the new bundle</param>
            <param name="exports">exports of the new bundle</param>
            <param name="categoryName">category in which this bundle belongs to</param>
            <param name="resources">resources this bundle offers</param>
            <param name="executor">the executor to execute calculations with</param>
            <param name="extraLines">array of strings of extra lines for the manifest</param>
            <param name="files">array of strings of "filename=/path/to/local/file"</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.CreateBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
              Create a new bundle with given parameters and datafiles. Final bundle
             name will consist of the bundle prefix, user login name and the bundle
             name (prefix.user.name). The prefix is usually in the format of
             "fi.techila.grid.cust.[name].[program].clientmodule.client.data".
            If the bundleName is empty or null the name is generated automatically.
            </summary>
             <param name="handle">the handle</param>
             <param name="bundlePrefix">prefix of the bundle name</param>
             <param name="bundleName">name of the bundle (last part of the full name)</param>
             <param name="description">description of the bundle</param>
             <param name="bundleVersion">version of the bundle</param>
             <param name="imports">imports for the new bundles</param>
             <param name="exports">exports of the new bundle</param>
             <param name="categoryName">category in which this bundle belongs to</param>
             <param name="resources">resources this bundle offers</param>
             <param name="executor">the executor to execute calculations with</param>
             <param name="extraLines">array of strings of extra lines for the manifest</param>
             <param name="files">Dictionary of filename - local file (full path) pairs</param>
             <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.CreateBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Create a new bundle with given parameters and datafiles. Final bundle
             name will consist of the bundle prefix, user login name and the bundle
             name (prefix.user.name). The prefix is usually in the format of
             "fi.techila.grid.cust.[name].[program].clientmodule.client.data".
             If the bundleName is empty or null the name is generated automatically.
             
             
             </summary>
             <example>
             <code>
             Dictionary&lt;String, String&gt; extras =
               new Dictionary&lt;String, String&gt;();
             extras.put("extraline1", "extralinedata");
             
             Dictionary&lt;String, String&gt; files =
               new Dictionary&lt;String, String&gt;();
             files.put("data1", "C:\\datafiles\\datafile1.dat");
             files.put("data2", "C:\\datafiles\\datafile2.dat");
             
             BundleManager bundleManager = techila.bundleManager();
             int statuscode = bundleManager.createBundle(handle,
               "fi.techila.grid.cust.example", "databundle1", "description", "0.0.1",
               "fi.techila.grid.cust.example.clientmodule.client", "",
               "{user}", "dataresource",
               "fi.techila.grid.cust.example.clientmodule.client;
               specification-version=0.1.0",
               extras, files);
             </code>
             </example>
             <param name="handle">the handle</param>
             <param name="bundlePrefix">prefix of the bundle name</param>
             <param name="bundleName">name of the bundle (last part of the full name)</param>
             <param name="description">description of the bundle</param>
             <param name="bundleVersion">version of the bundle</param>
             <param name="imports">imports for the new bundles</param>
             <param name="exports">exports of the new bundle</param>
             <param name="categoryName">category in which this bundle belongs to</param>
             <param name="resources">resources this bundle offers</param>
             <param name="executor">the executor to execute calculations with</param>
             <param name="extraLines">hashtable of extra line name-value pairs</param>
             <param name="files">Dictionary of filename - local file (full path) pairs</param>
             <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.CreateSignedBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String[])">
            <summary>Create a signed bundle file (jar).</summary>
            <see cref="M:Techila.Management.BundleManager.CreateSignedBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String)"/>
            <param name="handle">the handle</param>
            <param name="bundleName">name of the bundle (last part of the full name)</param>
            <param name="description">description of the bundle</param>
            <param name="bundleVersion">version of the bundle</param>
            <param name="imports">imports for the new bundles</param>
            <param name="exports">exports of the new bundle</param>
            <param name="natives">Native files</param>
            <param name="categoryName">category in which this bundle belongs to</param>
            <param name="resources">resources this bundle offers</param>
            <param name="activator">Bundle Activator</param>
            <param name="executor">the executor to execute calculations with</param>
            <param name="extras">extra lines, array of strings of "key=value"</param>
            <param name="files">array of strings of "filename=/path/to/local/file"</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.CreateSignedBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.String)">
            <summary>Create a signed bundle file (jar). Optionally giving filename.</summary>
            <see cref="M:Techila.Management.BundleManager.CreateSignedBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String)"/> 
            <param name="handle">the handle</param>
            <param name="bundleName">name of the bundle (last part of the full name)</param>
            <param name="description">description of the bundle</param>
            <param name="bundleVersion">version of the bundle</param>
            <param name="imports">imports for the new bundles</param>
            <param name="exports">exports of the new bundle</param>
            <param name="natives">Native files</param>
            <param name="categoryName">category in which this bundle belongs to</param>
            <param name="resources">resources this bundle offers</param>
            <param name="activator">Bundle Activator</param>
            <param name="executor">the executor to execute calculations with</param>
            <param name="extras">extra lines, array of strings of "key=value"</param>
            <param name="files">array of strings of "filename=/path/to/local/file"</param>
            <param name="bundleFile">output bundle filename, may be null</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.CreateSignedBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Create a signed bundle file (jar).</summary>
            <see cref="M:Techila.Management.BundleManager.CreateSignedBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String)"/>
            <param name="handle">the handle</param>
            <param name="bundleName">name of the bundle (last part of the full name)</param>
            <param name="description">description of the bundle</param>
            <param name="bundleVersion">version of the bundle</param>
            <param name="imports">imports for the new bundles</param>
            <param name="exports">exports of the new bundle</param>
            <param name="natives">Native files</param>
            <param name="categoryName">category in which this bundle belongs to</param>
            <param name="resources">resources this bundle offers</param>
            <param name="activator">Bundle Activator</param>
            <param name="executor">the executor to execute calculations with</param>
            <param name="extras">extra lines, array of strings of "key=value"</param>
            <param name="files">array of strings of "filename=/path/to/local/file"</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.CreateSignedBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>Create a signed bundle file (jar). Optionally giving filename.</summary>
            <example>
            <code>
            Dictionary&lt;String, String&gt; extras =
              new Dictionary&lt;String, String&gt;();
            extras.put("ResultHandler", "default");
            extras.put("Splitter", "default");
            extras.put("InternalResources", "example.exe;
            file=example.exe;destination=example.exe");
            extras.put("Executable", "example.exe");
            extras.put("OutputFiles", "output;file=result.dat");
            extras.put("Parameters", "%P(jobidx) %O(output)");
            
            Dictionary&gt;String, String&lt; files =
              new Dictionary&gt;String, String&lt;();
            files.put("example.exe", "example.exe");
            
            BundleManager bundleManager = techila.bundleManager();
            int statuscode = bundleManager.createSignedBundle(handle,
              "fi.techila.grid.cust.example.clientmodule.client",
              "binary bundle description", "0.1.0",
              "fi.techila.grid.cust.example.clientmodule.client",
              "",
              "x86/Windows/example.exe;osname=Windows XP;
              processor=x86,x86/Windows/example.exe;osname=Windows 2000;
              processor=x86,x86/Windows/example.exe;osname=Windows Vista;
              processor=x86",
              "", "", "", "", extras, files);
            </code>
            </example>
            <param name="handle">the handle</param>
            <param name="bundleName">name of the bundle (last part of the full name)</param>
            <param name="description">description of the bundle</param>
            <param name="bundleVersion">version of the bundle</param>
            <param name="imports">imports for the new bundles</param>
            <param name="exports">exports of the new bundle</param>
            <param name="natives">Native files</param>
            <param name="categoryName">category in which this bundle belongs to</param>
            <param name="resources">resources this bundle offers</param>
            <param name="activator">Bundle Activator</param>
            <param name="executor">the executor to execute calculations with</param>
            <param name="extras">extra lines, array of strings of "key=value"</param>
            <param name="files">array of strings of "filename=/path/to/local/file"</param>
            <param name="bundleFile">output bundle filename, may be null</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.SignJar(System.String,System.String)">
            <summary>Sign a JAR file. The input jar file is signed and the resulting signed
            jar is written tou the defined output jar file. The key and certificate
            used are those defined in <see cref="M:Techila.Management.TechilaManager.Init(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,System.Boolean)"/>.</summary>
            <param name="infile">input jar filename</param>
            <param name="outfile">output jar filename</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.UploadBundle(Techila.Management.Handle)">
            <summary>Upload a bundle assiciated with the handle (created with
            <see cref="M:Techila.Management.BundleManager.CreateSignedBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String[])"/>) to the server.</summary>
            <see cref="M:Techila.Management.BundleManager.CreateSignedBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String)"/>
            <see cref="M:Techila.Management.BundleManager.ApproveUploadedBundles(Techila.Management.Handle)"/>
            <returns>status code</returns>
            <param name="handle">Handle</param>
        </member>
        <member name="M:Techila.Management.BundleManager.UploadBundle(Techila.Management.Handle,System.String)">
            <summary>Upload a bundle file to the server. Uploaded bundles must be approved
            before they are taken into use.</summary>
            <see cref="M:Techila.Management.BundleManager.ApproveUploadedBundles(Techila.Management.Handle)"/>
            <param name="handle">Handle</param>
            <param name="bundleFile">bundle file</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.ApproveUploadedBundles(Techila.Management.Handle)">
            <summary>Approve uploaded bundles. All bundles uploaded with the given handle
            are approved. Possible errors are available in the log.</summary>
            <param name="handle">Handle</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.UseBundle(Techila.Management.Handle,System.String)">
            <summary>Set the bundle to be used in a project.</summary>
            <see cref="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String)"/>
            <see cref="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            <param name="handle">Handle</param>
            <param name="bundleName">full name of the bundle</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.UseBundle(Techila.Management.Handle,System.String,System.String)">
            <summary>Set bundle to be used in a project.</summary>
            <see cref="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String)"/>
            <see cref="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            <param name="handle">Handle</param>
            <param name="bundlePrefix">Prefix for bundle name</param>
            <param name="bundleName">Bundle name</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.BundleExists(System.String)">
            <summary>Does a bundle exist with given name.</summary>
            <param name="bundleName">name of the bundle to check</param>
            <returns>true if exists</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.BundleVersionExists(System.String,System.String)">
            <summary>Does a bundle exist with given name and version or any newer version.</summary>
            <param name="bundleName">name of the bundle to check</param>
            <param name="bundleVersion">minimum version of the bundle to check</param>
            <returns>true if exists</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.BundleExists(System.String,System.String)">
            <summary>Does a bundle exists with given prefix and last part.</summary>
            <param name="bundlePrefix">Prefix for bundle name</param>
            <param name="bundleName">Bundle name</param>
            <returns>true if exists</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.GetBundleId(Techila.Management.Handle)">
            <summary>Get the bundle ID associated with the handle. The returned bundle ID
            can be used with new handles by setting it with <c>setBundleId(Handle,
            int)</c> without the need to create new bundles each time.</summary>
            <see cref="M:Techila.Management.BundleManager.SetBundleId(Techila.Management.Handle,System.Int32)"/>
            <param name="handle">Handle</param>
            <returns>bundle id or error code &lt; 0</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.SetBundleId(Techila.Management.Handle,System.Int32)">
            <summary>Set bundle ID to be used with the handle. This method does not check
            the server if the bundle exists and should only be used with a value
            returned by <see cref="M:Techila.Management.BundleManager.GetBundleId(Techila.Management.Handle)"/> after
            <see cref="M:Techila.Management.BundleManager.CreateBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String[],System.String[])"/> (or <see cref="M:Techila.Management.BundleManager.UseBundle(Techila.Management.Handle,System.String)"/>).</summary>
            <see cref="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String)"/>
            <see cref="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            <param name="handle">Handle</param>
            <param name="bundleId">Bundle Id</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.BundleManager.GetLastCreatedBundleName(Techila.Management.Handle)">
            <summary>Returns the name of the bundle last created.</summary>
            <param name="handle">Handle</param>
            <returns>Bundle Name</returns>
        </member>
        <member name="F:Techila.Management.BundleManagerImpl.AUTO_BUNDLE_NAME_PREFIX">
            <summary>Prefix for library autogenerated bundle names.</summary>
        </member>
        <member name="M:Techila.Management.BundleManagerImpl.macroExpand(System.String)">
            replace {macro} definitions in the String.
            <param name="str">input string</param>
            <returns>string with macros replaced</returns>
        </member>
        <member name="T:Techila.Management.Common">
            <summary>
            Common stuff for all interface managers.
            </summary>
        </member>
        <member name="M:Techila.Management.Common.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Techila.Management.Common.Initialized">
            <summary>Has the library been initialized?</summary>
            <returns>true if initialized ok and library is usable.</returns>
        </member>
        <member name="P:Techila.Management.Common.Conn">
            <summary>Get the ConnectionWrapper instance.</summary>
            <returns>ConnectionWrapper instance.</returns>
        </member>
        <member name="M:Techila.Management.Common.EndConnection">
            <summary>End the connection and nullify conn.</summary>
        </member>
        <member name="P:Techila.Management.Common.GM">
            <summary>Get the TechilaManager instance.</summary>
        </member>
        <member name="P:Techila.Management.Common.Poller">
            <summary>Get the Poller instance.</summary>
            <returns>Poller instance.</returns>
        </member>
        <member name="M:Techila.Management.Common.StopPoller">
            <summary>Stop the poller and nullify poller.</summary>
        </member>
        <member name="P:Techila.Management.Common.TempDir">
            <summary>Get/Set the main temporary directory.</summary>
            <value>full path of the main temporary directory.</value>
        </member>
        <member name="T:Techila.Management.Configuration">
            <summary>
            Techila Configuration class.
            </summary>
        </member>
        <member name="F:Techila.Management.Configuration.DEFAULT_FILE_NAME">
            <summary>
            Default filename for the config file.
            </summary>
        </member>
        <member name="F:Techila.Management.Configuration.DEFAULT_OLD_FILE_NAME">
            <summary>Default old filename for the config file.</summary> 
        </member>
        <member name="F:Techila.Management.Configuration.DEFAULT_PORT">
            <summary>
            Default server port.
            </summary>
        </member>
        <member name="F:Techila.Management.Configuration.DEFAULT_MAX_LOG_SIZE">
            <summary>Default max log file size.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.DEFAULT_MAX_LOG_FILES">
            <summary>Default max number of log files.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myKeystore">
            <summary>User keystore filename.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myAlias">
            <summary>User alias in the keystore.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myPassword">
            <summary>User keystore and key password.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myStorePassword">
            <summary>Store password for later use.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.mySecurity">
            Sign jars etc. 
        </member>
        <member name="F:Techila.Management.Configuration.myHostname">
            <summary>Techila server hostname (or IP).</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myPort">
            <summary>Techila server management port.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myTempDir">
            <summary>Temporary directory.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myLogDir">
            <summary>Directory for logs.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myLogFileName">
            <summary>Log file name.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myLogFileSize">
            <summary>Max log file size.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myLogFileCount">
            <summary>Max number of logs.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myFileLogLevel">
            <summary>File log level.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myConsoleLogLevel">
            <summary>Console log level.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myStderr">
            <summary>Print errors to stderr.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myPollTime">
            <summary>Time between polls.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myDlRetryTime">
            <summary>Time between download retries.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myExecMaxRetryCount">
            <summary>Max execute retry count.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myExecRetryDelay">
            <summary>Delay between execute retries.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myPasswordDialog">
            <summary>PasswordDialog provider class name.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myStatusWindow">
            <summary>StatusWindow provider class name.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.mySwconf">
            <summary>Config for StatusWindow.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.LibDir">
            <summary>
            The location of the library files.
            </summary>
        </member>
        <member name="F:Techila.Management.Configuration.pluginConf">
            <summary>
            Config for Plugins.
            </summary>
        </member>
        <member name="F:Techila.Management.Configuration.myRecursiveDeleteOnUnload">
            <summary>Recursively delete tempdir on unload.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myStreamMode">
            <summary>Stream results.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.inidir">
            <summary>Directory of settings file (if used).</summary>
        </member>
        <member name="F:Techila.Management.Configuration.mySessionId">
            <summary>Session ID.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.mySessionStart">
            <summary>Session start time.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.mySessionTempDir">
            <summary>Session specific temp dir.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.myMaxResultsInStream">
            <summary>Maximum results transferred in a stream request, -1 = all available.</summary>
        </member>
        <member name="F:Techila.Management.Configuration.usedConfFile">
            <summary>
            If loading configuration from file, the used filename is stored here.
            </summary>
        </member>
        <member name="M:Techila.Management.Configuration.FindConfFile">
            <summary>Find the techila_settings.ini file from various locations.
            Order: system environment variable TECHILA_SETTINGS_FILE,
            current working directory, user home directory, sdkRoot.</summary>
            <returns>The filename of the settings file or null</returns>
        </member>
        <member name="M:Techila.Management.Configuration.ReadFile">
            <summary>Search for configuration file and read the configuration from the
            first found file.</summary>
        </member>
        <member name="M:Techila.Management.Configuration.ReadFile(System.String)">
            <summary>Read configuration from the given file.</summary>
            <param name="fileName">The file to read config from</param>
        </member>
        <member name="M:Techila.Management.Configuration.Init(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Initialize the config from a Dictionary.</summary>
            <param name="hm">Dictionary of config parameters</param>
        </member>
        <member name="M:Techila.Management.Configuration.ToString(System.String)">
            <summary>String representation of this configuration.</summary>
            <param name="sep">Separator char between fields</param>
            <returns>Config as String</returns>
        </member>
        <member name="M:Techila.Management.Configuration.ToString">
            <returns>Config parameters separated with ", "</returns>
        </member>
        <member name="P:Techila.Management.Configuration.Alias">
            <summary>Get/Set Alias.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.ConsoleLogLevel">
            <summary>Returns the consoleLogLevel.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.DLRetryTime">
            <summary>Returns the dlRetryTime.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.ErrorDir">
            <summary>Returns the errorDir.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.ErrorFile">
            <summary>Returns the errorFile.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.FileLogLevel">
            <summary>Returns the fileLogLevel.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.HostName">
            <summary>Returns the hostname.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.Keystore">
            <summary>Returns the keystore.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.Password">
            <summary>Returns the kspass.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.LogDir">
            <summary>Returns the logDir.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.LogFileCount">
            <summary>Returns the logFileCount.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.LogFileName">
            <summary>Returns the logFilename.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.LogFileSize">
            <summary>Returns the logFileSize.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.PasswordDialog">
            <summary>Returns the passwordDialog.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.PollTime">
            <summary>Returns the pollTime.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.Port">
            <summary>Returns the port.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.RecursiveDeleteOnUnload">
            <summary>Returns the recursiveDeleteOnUnload.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.StatusWindow">
            <summary>Get/Set statusWindow.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.Stderr">
            <summary>Get/set the stderr.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.StderrDir">
            <summary>Get/set the stderrDir.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.StderrFile">
            <summary>Get/Set the stderrFile.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.StdoutDir">
            <summary>Get/set the stdoutDir.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.StdoutFile">
            <summary>Returns the stdoutFile.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.StorePassword">
            <summary>Get/set the storePassword.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.Security">
            <summary>
            Is the security activated.
            </summary>
        </member>
        <member name="P:Techila.Management.Configuration.StreamMode">
            <summary>Get/set the streamMode.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.SWConf">
            <summary>Get the swconf.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.PluginConf">
            <summary>
            Get the plugin conf.
            </summary>
        </member>
        <member name="P:Techila.Management.Configuration.LangConf">
            <summary>
            Get the language conf.
            </summary>
        </member>
        <member name="P:Techila.Management.Configuration.TempDir">
            <summary>Returns the tempDir.</summary>
        </member>
        <member name="M:Techila.Management.Configuration.ReplaceFileSeparators(System.String)">
            <summary>Replace \\ and / to Path.DirectorySeparatorChar of the current OS.</summary>
            <param name="input">input string</param>
            <returns>output with replaced characters</returns>
        </member>
        <member name="M:Techila.Management.Configuration.ExpandMacros(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Expand all macros within given Dictionary, macros are expanded in place.
            Key names are assumed to be all lowercase.</summary>
            <param name="hm">Dictionary of all config parameters</param>
        </member>
        <member name="M:Techila.Management.Configuration.FindMacro(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Find macro definitions for given key and expand them using given pattern.</summary>
            <param name="key">Key to use</param>
            <param name="p">Pattern to match</param>
            <param name="hm">Values Dictionary</param>
            <param name="rhm">Additional values (properties, environment, etc)</param>
            <returns>true if the value still contains macros and need to be expanded again</returns>
        </member>
        <member name="M:Techila.Management.Configuration.FindMacroNames(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Find variable names from the macro definition.</summary>
            <param name="key">Key used (for cycle detection)</param>
            <param name="mDef">macro definition</param>
            <param name="value">Current value String</param>
            <param name="hm">Values</param>
            <param name="rhm">Additional values</param>
        </member>
        <member name="M:Techila.Management.Configuration.ParseString(System.String,System.String)">
            <summary>Compare string, if it is null or empty return default.</summary>
            <param name="str">the input string may be null</param>
            <param name="def">default value</param>
            <returns>str or def if str is null or empty</returns>
        </member>
        <member name="M:Techila.Management.Configuration.Ud(System.String)">
            <param name="str">Input string</param>
            <returns>The input string or "(undefined)" if str is null</returns>
        </member>
        <member name="P:Techila.Management.Configuration.ExecMaxRetryCount">
            <summary>Returns the execMaxRetryCount.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.ExecRetryDelay">
            <summary>Returns the execRetryDelay.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.MaxResultsInStream">
            <summary>Maximum number of results to transfer in one stream request.</summary>
        </member>
        <member name="P:Techila.Management.Configuration.IniDir">
            <summary>
            Location of settings file (if used)
            </summary>
        </member>
        <member name="T:Techila.Management.ConnectionWrapper">
            <summary>
             Wrap XML-RPC calls and HTTP GET and PUT. Internally handles session
            initiation and automatically add sessionId as first parameter for all calls.
            </summary>
        </member>
        <member name="F:Techila.Management.ConnectionWrapper.DefaultRetryDelay">
            <summary>Default delay between retries.</summary>
        </member>
        <member name="F:Techila.Management.ConnectionWrapper.MinRetryDelay">
            <summary>Minimum allowed delay.</summary>
        </member>
        <member name="F:Techila.Management.ConnectionWrapper.MinExecRetryDelay">
            <summary>Minimum allowed execute retry delay.</summary>
        </member>
        <member name="F:Techila.Management.ConnectionWrapper.DefaultExecRetryDelay">
            <summary>Default delay between retries.</summary>
        </member>
        <member name="F:Techila.Management.ConnectionWrapper.DefaultExecMaxRetryCount">
            <summary>Default delay between retries.</summary>
        </member>
        <member name="F:Techila.Management.ConnectionWrapper.retryDelay">
            <summary>The current configured retry delay.</summary>
        </member>
        <member name="F:Techila.Management.ConnectionWrapper.execRetryDelay">
            <summary>The current execute retry delay.</summary>
        </member>
        <member name="F:Techila.Management.ConnectionWrapper.execMaxRetryCount">
            <summary>Maximum execute retry count.</summary>
        </member>
        <member name="F:Techila.Management.ConnectionWrapper.maxResultsInStream">
            <summary>Maximum results transferred in one stream request.</summary>
        </member>
        <member name="M:Techila.Management.ConnectionWrapper.#ctor(Techila.Management.Logger,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Instantiate new wrapper.
            </summary>
            <param name="log">Logger</param>
            <param name="retryDelay">Delay between retries</param>
            <param name="execMaxRetryCount">Max retry count</param>
            <param name="execRetryDelay">delay between download retries</param>
            <param name="maxResultsInStream">Max results in one stream call</param>
            <param name="security">Use connection security</param>
        </member>
        <member name="M:Techila.Management.ConnectionWrapper.Init(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int64,System.Boolean)">
            <summary>
            Initialize wrapper for use.
            </summary>
            <param name="keystore">keystore location</param>
            <param name="alias">keystore alias</param>
            <param name="password">keystore password</param>
            <param name="hostName">server hostname</param>
            <param name="port">server port</param>
            <param name="sessionId">session id</param>
            <param name="sessionStart">session starttime</param>
            <param name="security">Use connection security</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ConnectionWrapper.End">
            <summary>
            End the server session.
            </summary>
        </member>
        <member name="P:Techila.Management.ConnectionWrapper.SecurityManager">
            <summary>
            Get the Security Manager.
            </summary>
            <returns>the Security Manager associated with this connection.</returns>
        </member>
        <member name="P:Techila.Management.ConnectionWrapper.SessionStart">
            <summary>
            Get the Session Start timestamp.
            </summary>
            <returns>start timestamp</returns>
        </member>
        <member name="P:Techila.Management.ConnectionWrapper.SessionId">
            <summary>
            Get the Session ID string.
            </summary>
            <returns>Session ID as String</returns>
        </member>
        <member name="M:Techila.Management.ConnectionWrapper.Execute(System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Execute a remote method. This will insert session ID as the first
            parameter. The original params vector is not changed.
            </summary>
            <param name="method">Method to execute</param>
            <param name="pars">Parameters for the method</param>
            <returns>response</returns>
        </member>
        <member name="M:Techila.Management.ConnectionWrapper.Get(System.String,System.String,Techila.Management.Handle)">
            <summary>
            Get a file from the server.
            </summary>
            <param name="path">path on the server.</param>
            <param name="localfile">name of the local file where to store the data.</param>
            <param name="handle">the handle</param>
        </member>
        <member name="M:Techila.Management.ConnectionWrapper.Get(System.String,System.String,Techila.Management.Handle,System.Boolean)">
            <summary>
            Get a file from the server.
            </summary>
            <param name="path">path on the server.</param>
            <param name="localfile">name of the local file where to store the data.</param>
            <param name="handle">the handle</param>
            <param name="stream">stream the result files</param>
            <returns>time to wait before second call, 0 if no more calls needed</returns>
        </member>
        <member name="M:Techila.Management.ConnectionWrapper.Put(System.String,System.String,Techila.Management.Handle)">
            <summary>
            Put a local file to the specified path on the server.
            </summary>
            <param name="localfile">local filename</param>
            <param name="path">server filename</param>
            <param name="handle">the handle</param>
        </member>
        <member name="T:Techila.Management.ExecuteProxy">
            <summary>
            Proxy for executing XML-RPC methods.
            </summary>
        </member>
        <member name="M:Techila.Management.ExecuteProxy.Execute(System.Object[])">
            <summary>
            Executes XML-RPC method.
            </summary>
            <param name="o">parameters for xml-rpc call</param>
            <returns>xml-rpc response</returns>
        </member>
        <member name="T:Techila.Management.Errors.ErrorParser">
            <summary>
            Parser for Errors in XML file.
            </summary>
        </member>
        <member name="F:Techila.Management.Errors.ErrorParser.errorFile">
            <summary>The error file to be parsed.</summary>
        </member>
        <member name="F:Techila.Management.Errors.ErrorParser.elemContent">
            <summary>Contents of the current XML element, used when parsing.</summary>
        </member>
        <member name="F:Techila.Management.Errors.ErrorParser.myProject">
            <summary>Current Project object.</summary>
        </member>
        <member name="F:Techila.Management.Errors.ErrorParser.job">
            <summary>Current Job.</summary>
        </member>
        <member name="F:Techila.Management.Errors.ErrorParser.msg">
            <summary>Current Message.</summary>
        </member>
        <member name="M:Techila.Management.Errors.ErrorParser.#ctor(System.String)">
            <summary>Construct a new ErrorParser.</summary>
            <param name="errorFile">the file to be parsed.</param>
        </member>
        <member name="M:Techila.Management.Errors.ErrorParser.Parse">
            <summary>Do the actual parsing.</summary>
        </member>
        <member name="P:Techila.Management.Errors.ErrorParser.Project">
            <summary>Get the Project object produced from the file.</summary>
        </member>
        <member name="P:Techila.Management.Errors.ErrorParser.Latest">
            <summary>
            Time of the latest error.
            </summary>
            <value>timestamp of latest</value>
        </member>
        <member name="M:Techila.Management.Errors.ErrorParser.StartElement(System.Xml.XmlReader)">
            <summary>
            XML Handler start Element.
            </summary>
            <param name="xr">xr</param>
        </member>
        <member name="M:Techila.Management.Errors.ErrorParser.EndElement(System.Xml.XmlReader)">
            <summary>
            XML Handler end Element.
            </summary>
            <param name="xr">xr</param>
        </member>
        <member name="M:Techila.Management.Errors.ErrorParser.Characters(System.Xml.XmlReader)">
            <summary>
            XML Handler text content.
            </summary>
            <param name="xr">xr</param>
        </member>
        <member name="T:Techila.Management.Errors.Message">
            <summary>
            Container for individual error messages.
            </summary>
        </member>
        <member name="F:Techila.Management.Errors.Message.myClientId">
            <summary>
            The client id where the error happened.
            </summary>
        </member>
        <member name="F:Techila.Management.Errors.Message.myTime">
            <summary>
            Time of the error.
            </summary>
        </member>
        <member name="F:Techila.Management.Errors.Message.myMessage">
            <summary>
            The actual error message.
            </summary>
        </member>
        <member name="P:Techila.Management.Errors.Message.ErrorMessage">
            <summary>
            Get/set error message.
            </summary>
        </member>
        <member name="P:Techila.Management.Errors.Message.Time">
            <summary>
            Get error timestamp
            </summary>
        </member>
        <member name="P:Techila.Management.Errors.Message.ClientId">
            <summary>
            Get error worker id.
            </summary>
        </member>
        <member name="M:Techila.Management.Errors.Message.#ctor(System.Int32,System.String)">
            <summary>Construct a new Error Message object.</summary>
            <param name="clientId">clientId</param>
            <param name="time">time</param>
        </member>
        <member name="P:Techila.Management.Errors.Message.Msg">
            <summary>
            Get the error message.
            </summary>
            <value>message with time</value>
        </member>
        <member name="M:Techila.Management.Errors.Message.ToString">
            <summary>
            String representation.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Techila.Management.Errors.Job">
            <summary>
            Container for Job errors.
            </summary>
        </member>
        <member name="F:Techila.Management.Errors.Job.myJobId">
            <summary>The job id.</summary>
        </member>
        <member name="F:Techila.Management.Errors.Job.msgs">
            <summary>List of messages.</summary>
        </member>
        <member name="M:Techila.Management.Errors.Job.#ctor(System.Int64)">
            Construct a new Job object.
            <param name="jobId">jobId</param>
        </member>
        <member name="M:Techila.Management.Errors.Job.AddMessage(Techila.Management.Errors.Message)">
            Add a Message object into the internal list.
            <param name="msg">msg</param>
        </member>
        <member name="P:Techila.Management.Errors.Job.JobId">
            <summary>Get the job id.</summary>
        </member>
        <member name="P:Techila.Management.Errors.Job.Messages">
            <summary>Get a list of Message objects.</summary>
        </member>
        <member name="M:Techila.Management.Errors.Job.GetMessage(System.Int32)">
            Get a Message at the specified index.
            <param name="index">index</param>
            @return
            @throws ArrayIndexOutOfBoundsException
        </member>
        <member name="M:Techila.Management.Errors.Job.Merge(Techila.Management.Errors.Job)">
            <summary>
            Merge messages for two Jobs with same jobid.
            </summary>
            <param name="job">job</param>
        </member>
        <member name="M:Techila.Management.Errors.Job.ToString">
            <summary>
            String representation.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Techila.Management.Errors.Project">
            <summary>
            Project Errors.
            </summary>
        </member>
        <member name="M:Techila.Management.Errors.Project.#ctor(System.Int64)">
            <summary>
            Constructor for Project.
            </summary>
            <param name="projectId">projectId</param>
        </member>
        <member name="M:Techila.Management.Errors.Project.AddJob(Techila.Management.Errors.Job)">
            <summary>
            Add Job to Project.
            </summary>
            <param name="job">job</param>
        </member>
        <member name="P:Techila.Management.Errors.Project.Jobs">
            <summary>
            Get Jobs of Project.
            </summary>
            <value>jobs</value>
        </member>
        <member name="M:Techila.Management.Errors.Project.GetJob(System.Int64)">
            <summary>
            Get Job of Project by jobid.
            </summary>
            <param name="jobId">jobId</param>
            <returns>job</returns>
        </member>
        <member name="T:Techila.Management.GraphicalStatusWindow">
            <summary>
            Graphicsl Status Window.
            </summary>
        </member>
        <member name="T:Techila.Management.GraphicalStatusWindow.Mode">
            <summary>
            The mode of the Status Window row.
            </summary>
        </member>
        <member name="F:Techila.Management.GraphicalStatusWindow.Mode.Project">
            <summary>
            The status of the Project jobs
            </summary>
        </member>
        <member name="F:Techila.Management.GraphicalStatusWindow.Mode.Upload">
            <summary>
            The status of the file upload
            </summary>
        </member>
        <member name="F:Techila.Management.GraphicalStatusWindow.Mode.Download">
            <summary>
            The status of the file download
            </summary>
        </member>
        <member name="F:Techila.Management.GraphicalStatusWindow.Mode.Unzip">
            <summary>
            The status of the file unzipping
            </summary>
        </member>
        <member name="T:Techila.Management.GraphicalStatusWindow.Statistics">
            <summary>
            Class for project states and statistics (rows) in the Status Window.
            </summary>
        </member>
        <member name="P:Techila.Management.GraphicalStatusWindow.Statistics.StatMode">
            <summary>
            The mode of the Status Window row.
            </summary>
        </member>
        <member name="P:Techila.Management.GraphicalStatusWindow.Statistics.PID">
            <summary>
            The Project Id for the Status Window row.
            </summary>
        </member>
        <member name="P:Techila.Management.GraphicalStatusWindow.Statistics.h">
            <summary>
            The Project Handle for the Status Window row.
            </summary>
        </member>
        <member name="P:Techila.Management.GraphicalStatusWindow.Statistics.Label">
            <summary>
            The Label of the Status Window row.
            </summary>
        </member>
        <member name="P:Techila.Management.GraphicalStatusWindow.Statistics.Waiting">
            <summary>
             The field containing number of Waiting Jobs in the Project.
            </summary>
        </member>
        <member name="P:Techila.Management.GraphicalStatusWindow.Statistics.Working">
            <summary>
             The field containing number of Active Jobs in the Project.
            </summary>
        </member>
        <member name="P:Techila.Management.GraphicalStatusWindow.Statistics.Completed">
            <summary>
             The field containing number of Completed Jobs in the Project.
            </summary>
        </member>
        <member name="P:Techila.Management.GraphicalStatusWindow.Statistics.Cancelled">
            <summary>
             The field containing number of Cancelled Jobs in the Project.
            </summary>
        </member>
        <member name="P:Techila.Management.GraphicalStatusWindow.Statistics.Downloading">
            <summary>
             The bytes to be downloaded of a file from the Project.
            </summary>
        </member>
        <member name="P:Techila.Management.GraphicalStatusWindow.Statistics.Downloaded">
            <summary>
            The bytes downloaded of a file from the Project. 
            </summary>
        </member>
        <member name="P:Techila.Management.GraphicalStatusWindow.Statistics.Uploading">
            <summary>
            The bytes to be uploaded of a file to the Project.
            </summary>
        </member>
        <member name="P:Techila.Management.GraphicalStatusWindow.Statistics.Uploaded">
            <summary>
            The bytes uploaded of a file to the Project.
            </summary>
        </member>
        <member name="P:Techila.Management.GraphicalStatusWindow.Statistics.Unzipping">
            <summary>
            The bytes to be unzipped of a file in a Project.
            </summary>
        </member>
        <member name="P:Techila.Management.GraphicalStatusWindow.Statistics.Unzipped">
            <summary>
            The bytes unzipped of a file in a Project.
            </summary>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.Statistics.Equals(System.Object)">
            <summary>
            Check if another Statistics instance Label matches this instance Label.
            </summary>
            <param name="o">The Statistics instance to compare</param>
            <returns>true if the Labels match</returns>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.Statistics.GetHashCode">
            <summary>
            Get Hashcode of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.Statistics.CompareTo(System.Object)">
            <summary>
            Compare this instance to another for sorting by Project Id.
            </summary>
            <param name="obj">The other instance</param>
            <returns>1 if the PID of given Instance is smaller than the PID of this instance, otherwise -1</returns>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.SetGM(Techila.Management.TechilaManager)">
            <summary>
            Set Techila Manager instance.
            </summary>
            <param name="gm"></param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.SetConf(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set configuration parameters.
            </summary>
            <param name="swconf">Configuration parameters.</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.Update(Techila.Management.Handle)">
            <summary>
            Update Status Window for the given project.
            </summary>
            <param name="handle">The handle of the project</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.ProjectAdded(Techila.Management.Handle)">
            <summary>
            The event handler for added project.
            </summary>
            <param name="handle">The handle of the project</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.ProjectRemoved(Techila.Management.Handle)">
            <summary>
            The event handler for removed project.
            </summary>
            <param name="handle">The handle of the project</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.Begin">
            <summary>
            The begin method of the Status Window.
            </summary>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.End">
            <summary>
            The end method of the Status Window.
            </summary>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.BeginDownload(Techila.Management.Handle)">
            <summary>
            The handler for a new download.
            </summary>
            <param name="handle">The handle of the project</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.EndDownload(Techila.Management.Handle)">
            <summary>
            The handler for an ended download.
            </summary>
            <param name="handle">The handle of the project</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.UpdateDownload(Techila.Management.Handle)">
            <summary>
            The handler for changes in the download.
            </summary>
            <param name="handle">The handle of the project</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.BeginUpload(Techila.Management.Handle)">
            <summary>
            The handler for a new upload.
            </summary>
            <param name="handle">The handle of the project</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.EndUpload(Techila.Management.Handle)">
            <summary>
            The handler for an ended upload.
            </summary>
            <param name="handle">The handle of the project</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.UpdateUpload(Techila.Management.Handle)">
            <summary>
            The handler for changes in the upload.
            </summary>
            <param name="handle">The handle of the project</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.BeginUnzip(Techila.Management.Handle)">
            <summary>
            The handler for a new unzipping.
            </summary>
            <param name="handle">The handle of the project</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.EndUnzip(Techila.Management.Handle)">
            <summary>
            The handler for an ended unzipping.
            </summary>
            <param name="handle">The handle of the project</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.UpdateUnzip(Techila.Management.Handle)">
            <summary>
            The handler for changes in the unzipping.
            </summary>
            <param name="handle">The handle of the project</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.Error(Techila.Management.Handle,System.Int64,System.String,System.String,System.Int32)">
            <summary>
            The error handler.
            </summary>
            <param name="handle">The handle of the project</param>
            <param name="jobid">The id of the job</param>
            <param name="time">The timestamp of the error</param>
            <param name="msg">The error message</param>
            <param name="clientid">The id of the worker</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.PollStatus(System.Int32,System.String)">
            <summary>
            The status of the Server in the last poll.
            </summary>
            <param name="code">The status code</param>
            <param name="msg">The status message</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.test">
            <summary>
            For internal testing only
            </summary>
        </member>
        <member name="P:Techila.Management.GraphicalStatusWindow.ShowWithoutActivation">
            <summary>
            The window is not activated when shown.
            </summary>
        </member>
        <member name="F:Techila.Management.GraphicalStatusWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Techila.Management.GraphicalPasswordDialog">
            <summary>
            Graphical Password Dialog.
            </summary>
        </member>
        <member name="M:Techila.Management.GraphicalPasswordDialog.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Techila.Management.GraphicalPasswordDialog.GetPassword(System.String,System.String)">
            <summary>
            Get password from the user.
            </summary>
            <param name="keystore">The user keystore</param>
            <param name="alias">The user alias</param>
            <returns>The password of the user</returns>
        </member>
        <member name="F:Techila.Management.GraphicalPasswordDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Techila.Management.GraphicalPasswordDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Techila.Management.GraphicalPasswordDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Techila.Management.GraphicalStatusWindow_Errors">
            <summary>
            Error Window of Graphical Status Window.
            </summary>
            <summary>
            Graphical Status Window.
            </summary>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow_Errors.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow_Errors.AddError(System.Int32,System.Int64,System.Int32,System.DateTime,System.String)">
            <summary>
            Add Error to the Error Window.
            </summary>
            <param name="pid">The Project Id</param>
            <param name="jobid">The Job Id</param>
            <param name="workerid">The Worker Id</param>
            <param name="timestamp">The timestamp of the Error</param>
            <param name="message">The Error message</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow_Errors.Rows">
            <summary>
            The number of the rows in the Error list.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Techila.Management.GraphicalStatusWindow_Errors.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow_Errors.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Techila.Management.GraphicalStatusWindow_Errors.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Techila.Management.Handle">
            <summary>
            Handle object for storing state information. Internal object for the
            library, not intended for use outside the library.
            </summary>
        </member>
        <member name="F:Techila.Management.Handle.idSequenceLock">
            <summary>Locking object for idSequence variable.</summary>
        </member>
        <member name="F:Techila.Management.Handle.idSequence">
            <summary>Sequence generator for handle ids.</summary>
        </member>
        <member name="F:Techila.Management.Handle.randomGen">
            <summary>Random number generator.</summary>
        </member>
        <member name="F:Techila.Management.Handle.random">
            <summary>Random.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myId">
            <summary>Current handle ID.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myBundle">
            <summary>Name of the bundle.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myLastCreatedBundle">
            <summary>Name of the last created bundle.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myBundleId">
            <summary>ID of the bundle.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myProjectId">
            <summary>ID of the project.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myDirectory">
            <summary>Result directory (for zip and errorfile).</summary>
        </member>
        <member name="F:Techila.Management.Handle.myResultFile">
            <summary>The downloaded result file (zip).</summary>
        </member>
        <member name="F:Techila.Management.Handle.myErrorFile">
            <summary>The downloaded error file (XML).</summary>
        </member>
        <member name="F:Techila.Management.Handle.myStdoutFile">
            <summary>The downloaded stdout file (XML).</summary>
        </member>
        <member name="F:Techila.Management.Handle.myStderrFile">
            <summary>The downloaded stderr file (XML).</summary>
        </member>
        <member name="F:Techila.Management.Handle.myUnzipDirectory">
            <summary>Directory for unzipped files.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myFiles">
            <summary>List of unzipped files.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myNewStreamedFiles">
            <summary>List of new streamed files (not yet retrieved by user).</summary>
        </member>
        <member name="F:Techila.Management.Handle.myResultOrderList">
            <summary>for Stream mode ordering of result files.</summary>
        </member>
        <member name="F:Techila.Management.Handle.newSFLock">
            <summary>Locking objed for the newsf List.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myBundleFiles">
            <summary>List of created bundle files.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myCachedJobs">
            <summary>List of cached job parameters.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myStatus">
            <summary>Project status.</summary>
        </member>
        <member name="F:Techila.Management.Handle.totaljobs">
            <summary>Total amount of jobs or -1 if all jobs are not yet created.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myJobcount">
            <summary>Total amount of created jobs in the project.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myReady">
            <summary>Amount of ready jobs in the project.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myWaiting">
            <summary>Amount of waiting jobs in the project.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myWorking">
            <summary>Amount of working jobs in the project.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myCancelled">
            <summary>Amount of cancelled jobs in the project.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myErrors">
            <summary>Amount of errors in the project.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myCputime">
            <summary>CPU time used in the project (s).</summary>
        </member>
        <member name="F:Techila.Management.Handle.myTime">
            <summary>Time used in the project (s).</summary>
        </member>
        <member name="F:Techila.Management.Handle.myDownloaded">
            <summary>Amount of downloaded bytes.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myDownloadLength">
            <summary>Amount of total bytes to be downloaded.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myUploaded">
            <summary>Amount of uploaded bytes.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myUploadLength">
            <summary>Amount of total bytes to be uploaded.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myUnzipFileCount">
            <summary>Amount of currently unzipped files.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myFilesReceived">
            <summary>The number of results fetched in streaming mode.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myStatusCode">
            <summary>Status code of the last poll operation.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myPolling">
            <summary>Is this handle processed by a Poller.</summary>
        </member>
        <member name="F:Techila.Management.Handle.log">
            <summary>Logger.</summary>
        </member>
        <member name="F:Techila.Management.Handle.myStreamResults">
            <summary>Should the poller get the results.</summary>
        </member>
        <member name="F:Techila.Management.Handle.lastUpdate">
            <summary>Timestamp of last update.</summary>
        </member>
        <member name="F:Techila.Management.Handle.isDownloading">
            <summary>Is Handle downloading something.</summary>
        </member>
        <member name="M:Techila.Management.Handle.#ctor(Techila.Management.Poller,Techila.Management.Logger,Techila.Management.TechilaManager)">
            <summary>Construct a new Handle object. Handle ID is generated automatically.</summary>
        </member>
        <member name="P:Techila.Management.Handle.Id">
            <summary>Get the handle ID.</summary>
        </member>
        <member name="P:Techila.Management.Handle.Bundle">
            <summary>get/set the bundle name.</summary>
            <value>bundle name</value>
        </member>
        <member name="P:Techila.Management.Handle.LastCreatedBundle">
            <summary>get/set the last created bundle name.</summary>
            <value>last created bundle name</value>
        </member>
        <member name="P:Techila.Management.Handle.BundleId">
            <summary>Get/set the bundle ID.</summary>
            <value>bundle id</value>
        </member>
        <member name="P:Techila.Management.Handle.ProjectId">
            <summary>Get/set the project id associated with this handle.</summary>
            <value>project id</value>
        </member>
        <member name="P:Techila.Management.Handle.DownloadDir">
            <summary>Get/set the download directory where project results are downloaded.</summary>
            <value>download directory</value>
        </member>
        <member name="P:Techila.Management.Handle.ResultFile">
            <summary>Get/Set result file (zip).</summary>
            <value>result file</value>
        </member>
        <member name="P:Techila.Management.Handle.ErrorFile">
            <summary>Get/Set the error file location.</summary>
            <value>errorFile</value>
        </member>
        <member name="P:Techila.Management.Handle.StdoutFile">
            <summary>Get/Set the current stdout file.</summary>
            <value>stdout file</value>
        </member>
        <member name="P:Techila.Management.Handle.StderrFile">
            <summary>Get/Set the current stderr file.</summary>
            <value>stderr file</value>
        </member>
        <member name="P:Techila.Management.Handle.UnzipDirectory">
            <summary>Get/Set the result unzip directory.</summary>
            <value>unzip directory</value>
        </member>
        <member name="M:Techila.Management.Handle.AddIntermediateFile(System.String)">
            <summary>
            Add a file to the list of intermediate result files.
            </summary>
            <param name="file">file</param>
        </member>
        <member name="M:Techila.Management.Handle.AddNewStreamedFile(System.String)">
            <summary>Add a file to the list of new streamed files.</summary>
            <param name="file">file</param>
        </member>
        <member name="M:Techila.Management.Handle.ClearUnzipFiles">
            <summary>Clear the list of unzipped files.</summary>
        </member>
        <member name="P:Techila.Management.Handle.UnzipFiles">
            <summary>Get a List of unzipped result files. The result should be used
            lock.</summary>
            <returns>List or null</returns>
        </member>
        <member name="P:Techila.Management.Handle.NewStreamedFiles">
            <summary>Get the list of new streamed files. The list will be emptied.</summary>
            <returns>The list or null</returns>
        </member>
        <member name="P:Techila.Management.Handle.IntermediateFiles">
            <summary>
            Get list of intermediate result files.
            </summary>
            <returns>List of files</returns>
        </member>
        <member name="P:Techila.Management.Handle.NewIntermediateFiles">
            <summary>
            Get list of new intermediate result files.
            </summary>
            <returns>List of files</returns>
        </member>
        <member name="P:Techila.Management.Handle.StreamedFiles">
            <summary>Get the list of ALL streamed files. The list will NOT be emptied.</summary>
            <returns>The list or null</returns>
        </member>
        <member name="M:Techila.Management.Handle.GetResultOrderList">
            <summary>Get the order list of results.</summary>
        </member>
        <member name="M:Techila.Management.Handle.AddCreatedBundleFile(System.String)">
            <summary>Add a created bundle file to list.</summary>
            <param name="file">file</param>
        </member>
        <member name="M:Techila.Management.Handle.AddCachedJob(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Add job parameters to cache.</summary>
            <param name="jparams">jparams</param>
        </member>
        <member name="M:Techila.Management.Handle.GetCachedJobs">
            <summary>Get a list of cached job parameters.</summary>
        </member>
        <member name="M:Techila.Management.Handle.ClearCachedJobs">
            <summary>Clear the list of cached job parameters.</summary>
        </member>
        <member name="M:Techila.Management.Handle.GetJobCacheSize">
            <summary>Get the number of cached jobs.</summary>
        </member>
        <member name="P:Techila.Management.Handle.ErrorProject">
            <summary>Get/set the errorProject object.</summary>
        </member>
        <member name="P:Techila.Management.Handle.CreatedBundleFiles">
            <summary>Get a List of created bundle files.</summary>
            <returns>List or null</returns>
        </member>
        <member name="P:Techila.Management.Handle.LastCreatedBundleFile">
            <summary>Get the last created bundle file.</summary>
            <returns>the bundle file created last</returns>
        </member>
        <member name="P:Techila.Management.Handle.ProjectParameters">
            <summary>Get/Set the project parameters of Handle.</summary>
        </member>
        <member name="M:Techila.Management.Handle.LockDownload">
            <summary>Sets lock for downloading new results.</summary>
        </member>
        <member name="M:Techila.Management.Handle.FreeDownload">
            <summary>Releases lock for downloading new results.</summary>
        </member>
        <member name="P:Techila.Management.Handle.Status">
            <summary>Get the project status.</summary>
            <returns>status</returns>
        </member>
        <member name="P:Techila.Management.Handle.Ready">
            <summary>Get the amount of ready jobs.</summary>
            <returns>amount of ready jobs</returns>
        </member>
        <member name="P:Techila.Management.Handle.ReadyWOP">
            <summary>Get the amount of ready jobs (without polling).</summary>>
            <returns>amount of ready jobs</returns>
        </member>
        <member name="P:Techila.Management.Handle.Working">
            <summary>Get the amount of working jobs.</summary>
            <returns>amount of working jobs</returns>
        </member>
        <member name="P:Techila.Management.Handle.Waiting">
            <summary>Get the amount of waiting jobs.</summary>
            <returns>amount of waiting jobs</returns>
        </member>
        <member name="P:Techila.Management.Handle.Cancelled">
            <summary>Get the amount of cancelled jobs.</summary>
            <returns>amount of cancelled jobs</returns>
        </member>
        <member name="P:Techila.Management.Handle.JobCount">
            <summary>Get the total amount of jobs.</summary>
            <returns>amount of total jobs</returns>
        </member>
        <member name="P:Techila.Management.Handle.JobCountWOP">
            <summary>
            Get total amount of jobs without polling.
            </summary>
        </member>
        <member name="P:Techila.Management.Handle.TotalJobs">
            <summary>Get the total amount of jobs.</summary>
            <returns>amount of total jobs</returns>
        </member>
        <member name="P:Techila.Management.Handle.TotalJobsWOP">
            <summary>
            Get total amount of jobs without polling. 
            </summary>
        </member>
        <member name="P:Techila.Management.Handle.Errors">
            <summary>Get the amount of errors.</summary>
            <returns>amount of errors</returns>
        </member>
        <member name="P:Techila.Management.Handle.ErrorsWOP">
            <summary>Get the amount of errors (without doing poll).</summary>
        </member>
        <member name="P:Techila.Management.Handle.CpuTime">
            <summary>Get the used CPU time for the project.</summary>
            <returns>time used in seconds</returns>
        </member>
        <member name="P:Techila.Management.Handle.Time">
            <summary>Get the used time for the project.</summary>
            <returns>time used in seconds</returns>
        </member>
        <member name="P:Techila.Management.Handle.LastError">
            <summary>Get the status code of the last poll operation, Support.OK if no error or no
            poll has yet been executed.</summary>
            <returns>statuscode</returns>
        </member>
        <member name="P:Techila.Management.Handle.Downloaded">
            <summary>Get the amount of bytes downloaded.</summary>
        </member>
        <member name="P:Techila.Management.Handle.DownloadLength">
            <summary>Get the total amount of bytes to be downloaded.</summary>
        </member>
        <member name="P:Techila.Management.Handle.Uploaded">
            <summary>Get the amount of bytes uploaded.</summary>
        </member>
        <member name="P:Techila.Management.Handle.UploadLength">
            <summary>Get the total amount of bytes to be uploaded.</summary>
        </member>
        <member name="P:Techila.Management.Handle.UnzipFileCount">
            <summary>Get the number of files unzipped.</summary>
        </member>
        <member name="P:Techila.Management.Handle.AllowPartial">
            <summary>
            Allow partial results.
            </summary>
        </member>
        <member name="P:Techila.Management.Handle.FilesReceived">
            <summary>Set/Get the number of files received so far in streaming mode.</summary>
        </member>
        <member name="M:Techila.Management.Handle.FilesReceivedChanged">
            <summary>Has the number of files received changed since last asked.</summary>
            <returns>true if the numbers have changed</returns>
        </member>
        <member name="M:Techila.Management.Handle.UpdateStatus(System.Int32)">
            <summary>Update only the project status.</summary>
            <returns>true if status was changed by this update</returns>
        </member>
        <member name="M:Techila.Management.Handle.Update(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>Update status and job counters.</summary>
            <param name="status">status</param>
            <param name="jobcount">jobcount</param>
            <param name="ready">ready</param>
            <param name="waiting">waiting</param>
            <param name="working">working</param>
            <param name="cancelled">cancelled</param>
            <param name="cputime">cputime</param>
            <param name="errors">errors</param>
            <param name="time">time</param>
            <param name="totaljobs">totaljobs</param>
            <returns>true if status or any counter changed</returns>
        </member>
        <member name="P:Techila.Management.Handle.Done">
            <summary>Is the project done (ready or failed). Returns false if the
            project status has not yet been polled.</summary>
            <returns>true if done</returns>
        </member>
        <member name="M:Techila.Management.Handle.ProjectDone">
            <summary>check if the project is done based on the project parameters.</summary>
            <returns>true if the project is done.</returns>
        </member>
        <member name="P:Techila.Management.Handle.Failed">
            <summary>Has the project failed.</summary>
        </member>
        <member name="M:Techila.Management.Handle.WaitDone">
            <summary>Wait for the project to be done.</summary>
        </member>
        <member name="P:Techila.Management.Handle.Polling">
            <summary>get/set polling status, enabled/disabled.</summary>
        </member>
        <member name="P:Techila.Management.Handle.StreamResults">
            <summary>Get/Set the stream results mode, enabled/disabled.</summary>
        </member>
        <member name="M:Techila.Management.Handle.UpdateDownload(System.Int64,System.Int64)">
            <summary>Update download status.</summary>
            <param name="downloaded">downloaded</param>
            <param name="downloadLength">downloadLength</param>
            <returns>true if counters changed</returns>
        </member>
        <member name="M:Techila.Management.Handle.UpdateUpload(System.Int64,System.Int64)">
            <summary>Update upload status.</summary>
            <param name="uploaded">uploaded</param>
            <param name="uploadLength">uploadLength</param>
            <returns>true if counters changed</returns>
        </member>
        <member name="M:Techila.Management.Handle.UpdateUnzip(System.Int32)">
            <summary>Update unzip status.</summary>
            <param name="unzipFileCount">unzipFileCount</param>
            <returns>true if counters changed</returns>
        </member>
        <member name="P:Techila.Management.Handle.StatusWindow">
            <summary>Get the StatusWindow.</summary>
        </member>
        <member name="M:Techila.Management.Handle.GetFilesSize">
            <summary>Get the size of files List, may return different count than
            getUnzipFileCount.</summary>
        </member>
        <member name="M:Techila.Management.Handle.checkPoll">
            <summary>Check if polling is enabled or poll directly.</summary>
        </member>
        <member name="M:Techila.Management.Handle.Close">
            <summary>
            Close Handle.
            </summary>
        </member>
        <member name="M:Techila.Management.Handle.Cleanup(Techila.Management.Support.CleanupMode)">
            <summary>
            Cleanup files associated with the handle.
            </summary>
            <example>
            <code>
            // clean all
            handle.cleanup(Support.CLEANUP_MODE.ALL);
            </code></example>
            <example>
            <code>
            // remove zip and download dir
            handle.cleanup(Support.CLEANUP_MODE.RESULT_FILE | Support.CLEANUP_MODE.DOWNLOAD_DIR);
            </code></example>
            <param name="mode">1 = project.zip, 2 = job files, 4 = download dir, 8 = unzip dir, 16 = created bundle files</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.Handle.Cleanup">
            <summary>
            Cleanup files associated with the Handle using CLEANUP_MODE.ALL.
            </summary>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.Handle.Delete(System.String,System.Boolean)">
            <summary>Delete a directory (or a file). The directory must be empty for
            it to be deleted or recursive must be true.</summary>
            <param name="dir">the directory to be deleted</param>
            <param name="recursive">delete recursively</param>
        </member>
        <member name="T:Techila.Management.HandleCallback">
            <summary>
             Callback handler interface. An object implementing this
            interface can be registered to handle callbacks.
            </summary>
        </member>
        <member name="M:Techila.Management.HandleCallback.eventCalled(Techila.Management.Handle)">
            <summary>
            Handle the callback event.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="T:Techila.Management.IntermediateResultHandler">
            <summary>
            Intermediate result handler interface. An object implementing this
            interface can be registered to handle intermediate result files.
            </summary>
        </member>
        <member name="M:Techila.Management.IntermediateResultHandler.handle(System.String)">
            <summary>
            Handle the intermediate result.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:Techila.Management.ITechilaManagerPlugin">
            <summary>
            Interface for Techila Manager Plugins.
            </summary>
        </member>
        <member name="M:Techila.Management.ITechilaManagerPlugin.ParseCommand(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.String[])">
            <summary>
            Execute CLI command.
            </summary>
            <param name="cmd">the command</param>
            <param name="parameters">the parsed key=value parameters</param>
            <param name="i">the index of the first unparsed argument</param>
            <param name="args">the unparsed command line arguments</param>
        </member>
        <member name="T:Techila.Management.PluginName">
            <summary>
            The plugin name registration.
            </summary>
        </member>
        <member name="M:Techila.Management.PluginName.#ctor">
            <summary>
            The plugin without a name.
            </summary>
        </member>
        <member name="M:Techila.Management.PluginName.#ctor(System.String)">
            <summary>
            The named plugin.
            </summary>
            <param name="txt">the name of the plugin</param>
        </member>
        <member name="M:Techila.Management.PluginName.Get">
            <summary>
            Get the name of the plugin.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Techila.Management.PluginClass">
            <summary>
            The plugin class registration.
            </summary>
        </member>
        <member name="M:Techila.Management.PluginClass.#ctor">
            <summary>
            The plugin without class name.
            </summary>
        </member>
        <member name="M:Techila.Management.PluginClass.#ctor(System.String)">
            <summary>
            The plugin with class name.
            </summary>
            <param name="txt">the name of the class</param>
        </member>
        <member name="M:Techila.Management.PluginClass.Get">
            <summary>
            Get the class name of the plugin.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Techila.Management.JarHelpers.Attributes">
            <summary>
             Jar Attributes.
            </summary>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.#ctor(System.Int32)">
            <summary>
            Constructor with size.
            </summary>
            <param name="size">size</param>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.#ctor(Techila.Management.JarHelpers.Attributes)">
            <summary>
            Copying constructor.
            </summary>
            <param name="attr">attr</param>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.Get(System.Object)">
            <summary>
            Get object from Attributes.
            </summary>
            <param name="name">name</param>
            <returns>object</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.GetValue(System.String)">
            <summary>
            Get value of Attribute.
            </summary>
            <param name="name">name</param>
            <returns>value</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.GetValue(Techila.Management.JarHelpers.Attributes.Name)">
            <summary>
            Get value of Attribute.
            </summary>
            <param name="name">name</param>
            <returns>value</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.Put(System.Object,System.Object)">
            <summary>
            Add Attribute name-value pair.
            </summary>
            <param name="name">name</param>
            <param name="value">value</param>
            <returns>previous value if exists with same name</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.PutValue(System.String,System.String)">
            <summary>
            Add Attribute value.
            </summary>
            <param name="name">name</param>
            <param name="value">value</param>
            <returns>previous value if exists with same name</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.Remove(System.Object)">
            <summary>
            Remove attribute value.
            </summary>
            <param name="name">name</param>
            <returns>removed value</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.ContainsValue(System.Object)">
            <summary>
            Return true if contains value.
            </summary>
            <param name="value">value</param>
            <returns>true if contains value</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.ContainsKey(System.Object)">
            <summary>
            Return true if contains key.
            </summary>
            <param name="name">name</param>
            <returns>true if contains key</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.PutAll(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Add all from collection.
            </summary>
            <param name="attr">attr</param>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.Size">
            <summary>
            Get the size.
            </summary>
            <returns>size</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.IsEmpty">
            <summary>
            Returns true if empty.
            </summary>
            <returns>true if empty</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.KeySet">
            <summary>
            Get the keys.
            </summary>
            <returns>keyset</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.Values">
            <summary>
            Get the values.
            </summary>
            <returns>values</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.Equals(System.Object)">
            <summary>
            Return true if equals to the given object.
            </summary>
            <param name="obj">obj</param>
            <returns>true if equals</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.GetHashCode">
            <summary>
            Return hash code.
            </summary>
            <returns>hashcode</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.Write(System.IO.Stream)">
            <summary>
            Write content to the stream.
            </summary>
            <param name="os">os</param>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.WriteMain(System.IO.Stream)">
            <summary>
            Write main attributes to the stream.
            </summary>
            <param name="os">os</param>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.Read(System.IO.TextReader)">
            <summary>
            Initialize values from stream.
            </summary>
            <param name="sr">sr</param>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.ToString">
            <summary>
            Get String representation.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Techila.Management.JarHelpers.Attributes.Name">
            <summary>
            Attribute Name class.
            </summary>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.Name.#ctor(System.String)">
            <summary>
             Create Attribute Name.
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.Name.ToString">
            <summary>
            Get String representation.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.Name.Equals(System.Object)">
            <summary>
            Returns true if equals to the given object.
            </summary>
            <param name="obj">obj</param>
            <returns>true if equals</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Attributes.Name.GetHashCode">
            <summary>
            Get hash code.
            </summary>
            <returns>hashcode</returns>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.ManifestVersion">
            <summary>
            Manifest version.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.SignatureVersion">
            <summary>
            Signature version.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.ContentType">
            <summary>
            Content type.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.ClassPath">
            <summary>
            Class path.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.MainClass">
            <summary>
            Main class.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.Sealed">
            <summary>
            Sealed.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.ExtensionList">
            <summary>
            Extension list.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.ExtensionName">
            <summary>
            Extension name.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.ExtensionInstallation">
            <summary>
            Extension installation.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.ImplementationTitle">
            <summary>
            Implementation title.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.ImplementationVersion">
            <summary>
            Implementation version.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.ImplementationVendor">
            <summary>
            Implementation vendor.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.ImplementationVendorId">
            <summary>
            Implementation vendor id.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.ImplementationUrl">
            <summary>
            Implementation URL.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.SpecificationTitle">
            <summary>
            Specification title.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.SpecificationVersion">
            <summary>
            Specification version.
            </summary>
        </member>
        <member name="F:Techila.Management.JarHelpers.Attributes.Name.SpecificationVendor">
            <summary>
            Specification vendor.
            </summary>
        </member>
        <member name="T:Techila.Management.JarHelpers.JarInputStream">
            <summary>
            Jar InputStream.
            </summary>
        </member>
        <member name="M:Techila.Management.JarHelpers.JarInputStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor.
            </summary>
            <param name="ins">ins</param>
        </member>
        <member name="M:Techila.Management.JarHelpers.JarInputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Constructor with verify. Verify is not used in this implementation.
            </summary>
            <param name="ins">ins</param>
            <param name="verify">verify</param>
        </member>
        <member name="P:Techila.Management.JarHelpers.JarInputStream.Manifest">
            <summary>
            Return Jar manifest.
            </summary>
        </member>
        <member name="M:Techila.Management.JarHelpers.JarInputStream.GetNextEntry">
            <summary>
            Return next entry from Jar.
            </summary>
        </member>
        <member name="T:Techila.Management.JarHelpers.JarOutputStream">
            <summary>
            Jar Outputstream.
            </summary>
        </member>
        <member name="M:Techila.Management.JarHelpers.JarOutputStream.#ctor(System.IO.Stream,Techila.Management.JarHelpers.Manifest)">
            <summary>
            Constructor.
            </summary>
            <param name="os">os</param>
            <param name="man">man</param>
        </member>
        <member name="M:Techila.Management.JarHelpers.JarOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor.
            </summary>
            <param name="os">os</param>
        </member>
        <member name="T:Techila.Management.JarHelpers.Manifest">
            <summary>
            Jar Manifest.
            </summary>
        </member>
        <member name="M:Techila.Management.JarHelpers.Manifest.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Techila.Management.JarHelpers.Manifest.#ctor(System.IO.Stream)">
            <summary>
            Construct Manifest from stream.
            </summary>
            <param name="ins">ins</param>
        </member>
        <member name="M:Techila.Management.JarHelpers.Manifest.#ctor(Techila.Management.JarHelpers.Manifest)">
            <summary>
            Copy Manifest.
            </summary>
            <param name="man">man</param>
        </member>
        <member name="P:Techila.Management.JarHelpers.Manifest.MainAttributes">
            <summary>
            Get Main Attributes.
            </summary>
            <returns>attributes</returns>
        </member>
        <member name="P:Techila.Management.JarHelpers.Manifest.Entries">
            <summary>
            Get Entries.
            </summary>
            <returns>entries</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Manifest.GetAttributes(System.String)">
            <summary>
            Get Attributes
            </summary>
            <param name="name">name</param>
            <returns>attributes</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Manifest.Clear">
            <summary>
            Clear Attributes and Entries.
            </summary>
        </member>
        <member name="M:Techila.Management.JarHelpers.Manifest.Write(System.IO.Stream)">
            <summary>
            Write Manifest to Stream.
            </summary>
            <param name="os">os</param>
        </member>
        <member name="M:Techila.Management.JarHelpers.Manifest.Make72Safe(System.Text.StringBuilder)">
            <summary>
            Modify Manifest lines to max 72 chars.
            </summary>
            <param name="sb">sb</param>
        </member>
        <member name="M:Techila.Management.JarHelpers.Manifest.Read(System.IO.StreamReader)">
            <summary>
            Read Manifest from Stream.
            </summary>
            <param name="sr">sr</param>
        </member>
        <member name="M:Techila.Management.JarHelpers.Manifest.Equals(System.Object)">
            <summary>
            Check if Equals to given Object.
            </summary>
            <param name="obj">obj</param>
            <returns>true if equals</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Manifest.GetHashCode">
            <summary>
            Return hash code.
            </summary>
            <returns>hashcode</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Manifest.ToString">
            <summary>
            Return String representation.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Techila.Management.JarHelpers.Manifest.Clone">
            <summary>
            Clone.
            </summary>
            <returns>clone</returns>
        </member>
        <member name="F:Techila.Management.JarSigner.cn">
            <summary>Class name for logging.</summary>
        </member>
        <member name="F:Techila.Management.JarSigner.sm">
            <summary>Security Manager.</summary>
        </member>
        <member name="F:Techila.Management.JarSigner.log">
            <summary>Logger instance.</summary>
        </member>
        <member name="T:Techila.Management.JKStore">
            <summary>
            Java Key Store.
            </summary>
        </member>
        <member name="M:Techila.Management.JKStore.GetCertificateChain(System.String)">
            <summary>
            Get certificate chain for alias.
            </summary>
            <param name="alias">the alias</param>
            <returns>the certificate chain</returns>
        </member>
        <member name="M:Techila.Management.JKStore.GetCertificates2(System.String)">
            <summary>
            Get certificates for alias.
            </summary>
            <param name="alias">the alias</param>
            <returns>the certificates</returns>
        </member>
        <member name="M:Techila.Management.JKStore.GetCertificate(System.String)">
            <summary>
            Get first certificate for alias.
            </summary>
            <param name="alias">the alias</param>
            <returns>the certificate</returns>
        </member>
        <member name="M:Techila.Management.JKStore.GetCertificate2(System.String)">
            <summary>
            Get certificate for alias.
            </summary>
            <param name="alias">the alias</param>
            <returns>the certificate</returns>
        </member>
        <member name="M:Techila.Management.JKStore.GetKey(System.String)">
            <summary>
            Get key for alias.
            </summary>
            <param name="alias">the alias</param>
            <returns>the key</returns>
        </member>
        <member name="P:Techila.Management.JKStore.Aliases">
            <summary>
            Get list of aliases in the key store.
            </summary>
        </member>
        <member name="M:Techila.Management.JKStore.IsKeyEntry(System.String)">
            <summary>
            Does the alias have key entry.
            </summary>
            <param name="alias">the alias</param>
            <returns>true if the alias has key entry</returns>
        </member>
        <member name="M:Techila.Management.JKStore.IsJKS(System.String)">
            <summary>
            Is the file JKS
            </summary>
            <param name="file">the name of the file</param>
            <returns>true if the file is JKS</returns>
        </member>
        <member name="M:Techila.Management.JKStore.Load(System.IO.Stream,System.Char[])">
            <summary>
            Load JKS from Stream.
            </summary>
            <param name="s">the stream of JKS</param>
            <param name="pw">the password of JKS</param>
        </member>
        <member name="M:Techila.Management.JKStore.Load(System.IO.Stream,System.Char[],Techila.Management.Logger)">
            <summary>
            Load JKS from Stream.
            </summary>
            <param name="s">the stream of JKS</param>
            <param name="pw">the password of JKS</param>
            <param name="log">Logger</param>
        </member>
        <member name="T:Techila.Management.JobInfo">
            <summary>
            Contains number of Project Jobs and their Statuses.
            </summary>
        </member>
        <member name="P:Techila.Management.JobInfo.Total">
            <summary>
            Total number of Jobs in Project.
            </summary>
        </member>
        <member name="P:Techila.Management.JobInfo.Waiting">
            <summary>
            Queuing Jobs in Project.
            </summary>
        </member>
        <member name="P:Techila.Management.JobInfo.Working">
            <summary>
            Active Jobs in Project.
            </summary>
        </member>
        <member name="P:Techila.Management.JobInfo.Ready">
            <summary>
            Completed Jobs in Project.
            </summary>
        </member>
        <member name="T:Techila.Management.Logger">
            <summary>
            Logger base.
            </summary>
        </member>
        <member name="M:Techila.Management.Logger.GetLogger(System.String)">
            <summary>
            Get/Create Logger for given name.
            </summary>
            <param name="p">Name of the Logger</param>
            <returns>New or existing Logger for the given name</returns>
        </member>
        <member name="M:Techila.Management.Logger.Finest(System.String)">
            <summary>
            Log message with the finest logging level.
            </summary>
            <param name="p">The message</param>
        </member>
        <member name="M:Techila.Management.Logger.Severe(System.String)">
            <summary>
            Log message with the severe logging level.
            </summary>
            <param name="p">The message</param>
        </member>
        <member name="M:Techila.Management.Logger.Fine(System.String)">
            <summary>
            Log message with the fine logging level.
            </summary>
            <param name="p">The message</param>
        </member>
        <member name="M:Techila.Management.Logger.Info(System.String)">
            <summary>
            Log message with the info logging level.
            </summary>
            <param name="p">The message</param>
        </member>
        <member name="M:Techila.Management.Logger.Warning(System.String)">
            <summary>
            Log message with the warning logging level.
            </summary>
            <param name="p">The message</param>
        </member>
        <member name="M:Techila.Management.Logger.Finer(System.String)">
            <summary>
            Log message with the finer logging level.
            </summary>
            <param name="p">The message</param>
        </member>
        <member name="M:Techila.Management.Logger.Entering(System.String,System.String)">
            <summary>
            Log entering to a class method.
            </summary>
            <param name="cn">The name of the class</param>
            <param name="p">The name of the method</param>
        </member>
        <member name="M:Techila.Management.Logger.Exiting(System.String,System.String)">
            <summary>
            Log exiting from a class method.
            </summary>
            <param name="cn">The name of the class</param>
            <param name="p">The name of the method</param>
        </member>
        <member name="M:Techila.Management.Logger.SetUseParentHandlers(System.Boolean)">
            <summary>
            Should log entries to be sent to the parent handlers.
            </summary>
            <param name="p">True if the entries should be sent to the parent handlers</param>
        </member>
        <member name="M:Techila.Management.Logger.SetLevel(System.String)">
            <summary>
            The logging level.
            </summary>
            <param name="p">The logging level</param>
        </member>
        <member name="M:Techila.Management.Logger.SetLevel(Techila.Management.LogHelpers.Level)">
            <summary>
            The logging level.
            </summary>
            <param name="p">The logging level</param>
        </member>
        <member name="M:Techila.Management.Logger.AddHandler(Techila.Management.LogHelpers.Handler)">
            <summary>
            Add a handler for this logger.
            </summary>
            <param name="handler">Log Handler</param>
        </member>
        <member name="M:Techila.Management.Logger.RemoveHandler(Techila.Management.LogHelpers.Handler)">
            <summary>
            Remove handler from this logger.
            </summary>
            <param name="handler">Log Handler</param>
        </member>
        <member name="M:Techila.Management.Logger.Log(Techila.Management.LogHelpers.Level,System.String)">
            <summary>
            Log message with given level.
            </summary>
            <param name="level">The logging level of the message</param>
            <param name="p">The message</param>
        </member>
        <member name="M:Techila.Management.Logger.Log(Techila.Management.LogHelpers.Level,System.String,System.String,System.String)">
            <summary>
            Log method message with given level.
            </summary>
            <param name="level">The logging level of the message</param>
            <param name="clazz">The class causing the message</param>
            <param name="method">The method causing the message</param>
            <param name="p">The message</param>
        </member>
        <member name="T:Techila.Management.LogHelpers.IFormatter">
            <summary>
            Log Formatter.
            </summary>
        </member>
        <member name="M:Techila.Management.LogHelpers.IFormatter.Format(System.DateTime,Techila.Management.LogHelpers.Level,System.String,System.String,System.String)">
            <summary>
            Format message.
            </summary>
            <param name="time">time</param>
            <param name="level">level</param>
            <param name="className">className</param>
            <param name="method">method</param>
            <param name="msg">msg</param>
            <returns>formatted message</returns>
        </member>
        <member name="M:Techila.Management.LogHelpers.IFormatter.SetFormat(System.String)">
            <summary>
            Set format.
            </summary>
            <param name="format">format</param>
        </member>
        <member name="T:Techila.Management.LogHelpers.Handler">
            <summary>
            Log Handler base.
            </summary>
        </member>
        <member name="F:Techila.Management.LogHelpers.Handler.myLevel">
            <summary>
            Logging level.
            </summary>
        </member>
        <member name="P:Techila.Management.LogHelpers.Handler.Level">
            <summary>
            Set/Get logging level.
            </summary>
        </member>
        <member name="F:Techila.Management.LogHelpers.Handler.myFormatter">
            <summary>
            default log formatter.
            </summary>
        </member>
        <member name="P:Techila.Management.LogHelpers.Handler.Formatter">
            <summary>
            Set/get log formatter.
            </summary>
        </member>
        <member name="M:Techila.Management.LogHelpers.Handler.Close">
            <summary>
             Close handler.
            </summary>
        </member>
        <member name="M:Techila.Management.LogHelpers.Handler.WriteLog(Techila.Management.LogHelpers.Level,System.String,System.String,System.String)">
            <summary>
             Write log entry.
            </summary>
            <param name="level">level</param>
            <param name="className">className</param>
            <param name="method">method</param>
            <param name="msg">msg</param>
        </member>
        <member name="M:Techila.Management.LogHelpers.Handler.Dispose">
            <summary>
            Free resources.
            </summary>
        </member>
        <member name="T:Techila.Management.LogHelpers.IHandler">
            <summary>
            Log Handler interface.
            </summary>
        </member>
        <member name="M:Techila.Management.LogHelpers.IHandler.Close">
            <summary>
             Close handler.
            </summary>
        </member>
        <member name="M:Techila.Management.LogHelpers.IHandler.WriteLog(Techila.Management.LogHelpers.Level,System.String,System.String,System.String)">
            <summary>
             Write log entry.
            </summary>
            <param name="level">level</param>
            <param name="className">className</param>
            <param name="method">method</param>
            <param name="msg">msg</param>
        </member>
        <member name="T:Techila.Management.LogHelpers.Level">
            <summary>
            Logger Levels.
            </summary>
        </member>
        <member name="F:Techila.Management.LogHelpers.Level.Off">
            <summary>
            Turn off logging.
            </summary>
        </member>
        <member name="F:Techila.Management.LogHelpers.Level.Severe">
            <summary>
            Serious errors.
            </summary>
        </member>
        <member name="F:Techila.Management.LogHelpers.Level.Warning">
            <summary>
            Warnings.
            </summary>
        </member>
        <member name="F:Techila.Management.LogHelpers.Level.Info">
            <summary>
            Informational messages.
            </summary>
        </member>
        <member name="F:Techila.Management.LogHelpers.Level.Config">
            <summary>
            Configuration messages.
            </summary>
        </member>
        <member name="F:Techila.Management.LogHelpers.Level.Fine">
            <summary>
            Debug level 1.
            </summary>
        </member>
        <member name="F:Techila.Management.LogHelpers.Level.Finer">
            <summary>
            Debug level 2.
            </summary>
        </member>
        <member name="F:Techila.Management.LogHelpers.Level.Finest">
            <summary>
            Debug level 3.
            </summary>
        </member>
        <member name="F:Techila.Management.LogHelpers.Level.All">
            <summary>
            All messages.
            </summary>
        </member>
        <member name="F:Techila.Management.LogHelpers.Level.levelStrings">
            <summary>
            The Strings for the levels.
            </summary>
        </member>
        <member name="P:Techila.Management.LogHelpers.Level.LevelValue">
            <summary>
            Get integer value of level.
            </summary>
        </member>
        <member name="M:Techila.Management.LogHelpers.Level.#ctor(System.Int32)">
            <summary>
            Create a new Level from the integer.
            </summary>
            <param name="level">level</param>
        </member>
        <member name="M:Techila.Management.LogHelpers.Level.Equals(System.Object)">
            <summary>
            Return true if equals to given object.
            </summary>
            <param name="obj">obj</param>
            <returns>true if equals</returns>
        </member>
        <member name="M:Techila.Management.LogHelpers.Level.GetHashCode">
            <summary>
            Hashcode of the object.
            </summary>
            <returns>hashcode</returns>
        </member>
        <member name="M:Techila.Management.LogHelpers.Level.ToString">
            <summary>
            String representation.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Techila.Management.LogHelpers.LogFormatter">
            <summary>
            Log Formatter base.
            </summary>
        </member>
        <member name="M:Techila.Management.LogHelpers.LogFormatter.Format(System.DateTime,Techila.Management.LogHelpers.Level,System.String,System.String,System.String)">
            <summary>
            Format log message.
            </summary>
            <param name="time">time</param>
            <param name="level">level</param>
            <param name="className">className</param>
            <param name="method">method</param>
            <param name="msg">msg</param>
            <returns>formatted message</returns>
        </member>
        <member name="M:Techila.Management.LogHelpers.LogFormatter.SetTimeFormat(System.String)">
            <summary>
            Set log entry time format.
            </summary>
            <param name="format">format</param>
        </member>
        <member name="M:Techila.Management.LogHelpers.LogFormatter.SetFormat(System.String)">
            <summary>
            Set log format.
            </summary>
            <param name="format">format</param>
        </member>
        <member name="T:Techila.Management.PasswordDialog">
            <summary>
            Interface for providers implementing password dialog.
            </summary>
        </member>
        <member name="M:Techila.Management.PasswordDialog.GetPassword(System.String,System.String)">
            <summary>Ask the user for a password and return it to the caller. The password
            asking code should display a prompt showing the keystore and alias,
            for example "Enter password for alias mykey in keystore.p12".</summary>
            <param name="keystore">the keystore location</param>
            <param name="alias">The alias in the keystore</param>
            <returns>The password</returns>
        </member>
        <member name="T:Techila.Management.Peach">
            <summary>
             Peach Interface. Peach is intended to simply run an executable in the
             Techila system as many times parallel as needed.
             Peach name is mandatory, it is used as bundle prefixes and to save the
             state file (&lt;name&gt;.state).
             Before using Peach, the SDK library must be initialized properly.
             After getting a Peach instance with a selected name, the configuration
             methods should be called, these are the set, add and put methods.
             Usually at least <see cref="P:Techila.Management.Peach.Executable"/> or <see cref="M:Techila.Management.Peach.AddExeFile(System.String)"/>
             should be called. Also <see cref="P:Techila.Management.Peach.Jobs"/> must be called, otherwise
             a project won't be created.
             After Peach has been configured properly <see cref="M:Techila.Management.Peach.Execute"/> can be
             called. With normal configurateion the execute method will create all
             bundles if required depending on the saved state. After the bundles are
             created it will create a project and start it.
             To get the results <see cref="P:Techila.Management.Peach.NextFile"/> method will return the result
             files one per each call. If streaming is used the method will return with
             a file as soon as one is available, otherwise it will return when all
             results have been downloaded. When no more files are available
             <see cref="P:Techila.Management.Peach.NextFile"/> returns null.
             After everything is done the <see cref="M:Techila.Management.Peach.Done"/> method must be called.
             This will clean up everything.
             </summary>
        </member>
        <member name="P:Techila.Management.Peach.StateDir">
            <summary>
            The location of state file.
            </summary>
        </member>
        <member name="P:Techila.Management.Peach.Name">
            <summary>Set the peach name.</summary>
        </member>
        <member name="P:Techila.Management.Peach.Description">
            <summary>Set the description.</summary>
        </member>
        <member name="P:Techila.Management.Peach.Messages">
            <summary>Enable messages printing.</summary>
        </member>
        <member name="P:Techila.Management.Peach.Priority">
            <summary>Set the project priority.</summary>
        </member>
        <member name="P:Techila.Management.Peach.ResultFile">
            <summary>
            The result file.
            </summary>
        </member>
        <member name="P:Techila.Management.Peach.StringPriority">
            <summary>Set the project priority with String value.</summary>
        </member>
        <member name="P:Techila.Management.Peach.Jobs">
            <summary>Set number of jobs to be created.</summary>
            <value>job count</value>
        </member>
        <member name="P:Techila.Management.Peach.PeachList">
            <summary>Set the peachparam parameter for the jobs to be created. The number of
            jobs to be created equals the length of the List. Each job will get a
            single value from the List into parameter "peachparam".</summary>
            <value>peachparams</value>
        </member>
        <member name="P:Techila.Management.Peach.JobParams">
            <summary>Set the parameters for the jobs to be created. The number of jobs
            to be created equals the length of the List. Each job will get a single
            set of values from the List into job parameters.</summary>
            <value>jobparams</value>
        </member>
        <member name="P:Techila.Management.Peach.AllowPartial">
            <summary>Allow partial results in download. Ignored when streaming is enabled.</summary>
            <value>allow partial</value>
        </member>
        <member name="P:Techila.Management.Peach.Remove">
            <summary>Remove project after it is done (done within done()). Default false.</summary>
            <see cref="M:Techila.Management.Peach.Done"/>
            <value>remove</value>
        </member>
        <member name="P:Techila.Management.Peach.Cleanup">
            <summary>Cleanup handle temporary files at done(). Default true.</summary>
            <value>cleanup</value>
        </member>
        <member name="P:Techila.Management.Peach.Close">
            <summary>Close the handle at done(). Default true.</summary>
            <value>close</value>
        </member>
        <member name="M:Techila.Management.Peach.AddSourceFile(System.String)">
            <summary>Add a source file.</summary>
            <param name="file">source file name</param>
        </member>
        <member name="M:Techila.Management.Peach.PutSourceExtras(System.String,System.String)">
            <summary>Store source extra parameters. Use for example compiler version,
            32/64 -bits, etc...</summary>
            <param name="name">name of the parameter</param>
            <param name="value">value of the parameter</param>
        </member>
        <member name="M:Techila.Management.Peach.PutAllSourceExtras(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Put all values of given Map into the source bundles extra parameters.</summary>
            <param name="extras">extras</param>
        </member>
        <member name="P:Techila.Management.Peach.SourcesChanged">
            <summary>Check if the source files have changed compared to saved state.</summary>
            <value>true if source files have changed</value>
        </member>
        <member name="P:Techila.Management.Peach.ExeBundleName">
            <summary>Use a precreated executor bundle.</summary>
            <value>name of the bundle</value>
        </member>
        <member name="P:Techila.Management.Peach.Executable">
            <summary>Set the executable. This can be used the executable is not within the
            executor bundle but already exists on the worker. E.g. %L(resource) can
            be used here or a reference to a preinstalled binary, or %A(feature)
            to use a feature configured for the worker.</summary>
            <value>executable</value>
        </member>
        <member name="P:Techila.Management.Peach.JavaExecutable">
            <summary>Set the executable to use worker installed Java binary. A convenience
            method to define executable for Java applications.</summary>
            <value>java executable</value>
        </member>
        <member name="P:Techila.Management.Peach.ExeSkipDigest">
            <summary>Set the skip digest bit for the executor bundle.</summary>
            <value>skip digest</value>
        </member>
        <member name="M:Techila.Management.Peach.AddExeFile(System.String)">
            <summary>Add a file into the Executor bundle. Resource "exe" will be used, i.e.
            the file must be the executable.</summary>
            <param name="file">filename</param>
        </member>
        <member name="M:Techila.Management.Peach.AddExeFile(System.String,System.String)">
            <summary>Add a file into the Executor bundle with given resource name. Use "exe"
            as resource name for the actual executable files which are to be run.
            Other files can have any resource name, even null.</summary>
            <param name="res">resource name, if null the file basename is used</param>
            <param name="file">the actual file (with path if not in the current directory)</param>
        </member>
        <member name="M:Techila.Management.Peach.AddExeFile(System.String,System.String,System.String)">
            <summary>Add a file into the Executor bundle with given parameters.</summary>
            <param name="res">resource name</param>
            <param name="file">the file name (with path)</param>
            <param name="osname">osname</param>
        </member>
        <member name="M:Techila.Management.Peach.AddExeFile(System.String,System.String,System.String,System.String)">
            <summary>Add a file into the Executor bundle with given parameters.</summary>
            <param name="res">resource name</param>
            <param name="file">the file name (with path)</param>
            <param name="osname">osname</param>
            <param name="processor">processor architechture</param>
        </member>
        <member name="M:Techila.Management.Peach.PutExeExtras(System.String,System.String)">
            <summary>Put a value into the Executor bundles extra parameters.</summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Techila.Management.Peach.PutAllExeExtras(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Put all values of given Map into the Executor bundles extra parameters.</summary>
            <param name="extras">key-value pairs</param>
        </member>
        <member name="M:Techila.Management.Peach.AddExeImport(System.String)">
            <summary>Add an import for the Executor bundle.</summary>
            <param name="importName">bundle to import</param>
        </member>
        <member name="M:Techila.Management.Peach.AddOutputFile(System.String)">
            <summary>Add an outpuf file definition, eg. "output;file=outputfile.dat".
            If no output files are defined the default
            "output;file=techila_peach_result.dat" is used.</summary>
            <param name="def">remote filename</param>
        </member>
        <member name="P:Techila.Management.Peach.UseDefaultOutputFile">
            <summary>When no output files are defined a default (techila_peach_result.dat)
            is used in executor bundle definition. By setting this to false the
            default is not set. Use this when OutputFiles parameter has been
            defined in an imported bundle (e.g. runtime bundle). When output
            file definitions have been added this setting has no effect.</summary>
            <value>use default</value>
        </member>
        <member name="M:Techila.Management.Peach.NewDataBundle">
            <summary>Start defining a new data bundle. This must be called first before
            any other data bundle related commands.</summary>
        </member>
        <member name="M:Techila.Management.Peach.NewDataBundle(System.String)">
            <summary>Use a named databundle that already exists on the server...
            adding files to this has no effect. Bundles can be created with for
            example bundle creater tool or createSignedBundle -method.</summary>
            <param name="name">bundle name</param>
        </member>
        <member name="P:Techila.Management.Peach.DataSkipDigest">
            <summary>Set the skip digest bit for current data bundle. Setting this to true
            will skip generating digests of files added to the bundle. Only
            affect files added after changing the bit.</summary>
            <value>skip digest</value>
        </member>
        <member name="M:Techila.Management.Peach.AddDataFile(System.String)">
            <summary>Add a file into the current data bundle.</summary>
            <param name="file">filename</param>
        </member>
        <member name="M:Techila.Management.Peach.AddDataFile(System.String,System.String)">
            <summary>Add a file into the current data bundle.</summary>
            <param name="file">filename</param>
            <param name="targetName">remote filename</param>
        </member>
        <member name="M:Techila.Management.Peach.AddDataFileWithDir(System.String,System.String)">
            <summary>Add a file from a directory into the current data bundle.</summary>
            <param name="dir">the directory where the file is, null for current dir</param>
            <param name="file">filename</param>
        </member>
        <member name="M:Techila.Management.Peach.PutDataExtras(System.String,System.String)">
            <summary>Put a value into the current data bundles extra parameters.</summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Techila.Management.Peach.PutAllDataExtras(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Put all values of given Map into the data bundles extra parameters.</summary>
            <param name="extras">key-value pairs</param>
        </member>
        <member name="P:Techila.Management.Peach.DataCopy">
            <summary>Set the bundle files copy parameter. When true (default) the files
            in the data bundle are copied into the working directory (execution
            directory). When false the files are not copied and can be referenced
            by using %L(peach_datafiles_X) where X is the index of the data bundle.</summary>
            <value>copy</value>
        </member>
        <member name="P:Techila.Management.Peach.JobSkipDigest">
            <summary>Set the skip digest bit for job input bundle.</summary>
            <value>skip</value>
        </member>
        <member name="M:Techila.Management.Peach.SetJobFileNames(System.String[])">
            <summary>Set job input file names. This will clear all previously
            added / set names.</summary>
            <param name="names">The names of the files</param>
        </member>
        <member name="M:Techila.Management.Peach.AddJobFile(System.String[])">
            <summary>Add files to be included in the Job Input Bundle.</summary>
            <param name="files">The names of the files</param>
        </member>
        <member name="M:Techila.Management.Peach.AddJobFileWithDir(System.String,System.String[])">
            <summary>Add files from a directory to be included in the Job Input Bundle.</summary>
            <param name="dir">The directory where the file is, null = current dir</param>
            <param name="files">The names of the files</param>
        </member>
        <member name="M:Techila.Management.Peach.PutJobExtras(System.String,System.String)">
            <summary>Put a value into the Job Input Bundle extra parameters.</summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Techila.Management.Peach.PutAllJobExtras(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Put all values of given Map into the Job Input Bundles extra parameters.</summary>
            <param name="extras">key-value pairs</param>
        </member>
        <member name="P:Techila.Management.Peach.ParamSkipDigest">
            <summary>Set the Parameter bundle skip digest bit.</summary>
            <value>skip</value>
        </member>
        <member name="M:Techila.Management.Peach.AddParamFile(System.String)">
            <summary>Add a file into the parameter bundle.</summary>
            <param name="file">The file</param>
        </member>
        <member name="M:Techila.Management.Peach.AddParamFileWithDir(System.String,System.String)">
            <summary>Add file into parameter bundle from a given directory.</summary>
            <param name="dir">directory where the file is, null for current dir</param>
            <param name="file">the filename</param>
        </member>
        <member name="M:Techila.Management.Peach.AddParamFile(System.String,System.String)">
            <summary>Add a file into the parameter bundle and specify target name.</summary>
            <param name="file">the file</param>
            <param name="targetName">target file name in the bundle</param>
        </member>
        <member name="M:Techila.Management.Peach.PutParamExtras(System.String,System.String)">
            <summary>Put a value into the parameter bundles extra parameters.</summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Techila.Management.Peach.PutAllParamExtras(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Put all values of given Map into the parameters bundles extra
            parameters.</summary>
            <param name="extras">key-value pairs</param>
        </member>
        <member name="M:Techila.Management.Peach.AddParamExternalResource(System.String)">
            <summary>Add External Resource to Parameter Bundle.</summary>
            <param name="res">resource</param>
        </member>
        <member name="P:Techila.Management.Peach.ParamCopy">
            <summary>Set the parameter bundle copy parameters.</summary>
            <see cref="P:Techila.Management.Peach.DataCopy"/>
            <value>copy</value>
        </member>
        <member name="M:Techila.Management.Peach.PutProjectParam(System.String,System.String)">
            <summary>Set a project parameter to a given value.</summary>
            <param name="name">parameter name</param>
            <param name="value">parameter value</param>
        </member>
        <member name="M:Techila.Management.Peach.PutAllProjectParams(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Put all values of a given Map into project parameters.</summary>
            <param name="parameters">key-value pairs</param>
        </member>
        <member name="P:Techila.Management.Peach.Stream">
            <summary>Set streaming mode.</summary>
            <value>stream</value>
        </member>
        <member name="M:Techila.Management.Peach.Execute">
            <summary>Run the Peach. This will create all bundles if necessary and then
             create and start the project.</summary>
             <returns>status code</returns>
        </member>
        <member name="P:Techila.Management.Peach.NextFile">
            <summary>Get the result file. This will return null if no more files are
            available, i.e. the project is done or failed.</summary>
            <returns>filename and path to a result file or null.</returns>
        </member>
        <member name="M:Techila.Management.Peach.Done">
            <summary>Mark Peach call as done. Remove and cleanup leftovers.
            This must be called always.</summary>
        </member>
        <member name="P:Techila.Management.Peach.ProjectHandle">
            <summary>Get the handle used for project commands.</summary>
            <value>the project handle</value>
        </member>
        <member name="P:Techila.Management.Peach.ProjectId">
            <summary>Get/Set the project ID of the current project.</summary>
            <value>the project id or -1 if not yet set.</value>
        </member>
        <member name="F:Techila.Management.PeachImpl.DEFAULT_EXE_EXPIRATION">
            <summary>Default expiration time for Executor bundles.</summary>
        </member>
        <member name="F:Techila.Management.PeachImpl.DEFAULT_DATA_EXPIRATION">
            <summary>Default expiration time for Data bundles.</summary>
        </member>
        <member name="F:Techila.Management.PeachImpl.DEFAULT_BIG_DATA_EXPIRATION">
            <summary>Default expiration time for bigger Data bundles.</summary>
        </member>
        <member name="F:Techila.Management.PeachImpl.DEFAULT_SERVER_EXPIRATION">
            <summary>Default expiration time for bundles in Server.</summary>
        </member>
        <member name="F:Techila.Management.PeachImpl.BIG_DATA_LIMIT">
            <summary>Limit in bytes of normal vs. big data bundles.</summary>
        </member>
        <member name="F:Techila.Management.PeachImpl.DEFAULT_PARAMETER_EXPIRATION">
            <summary>Default expiration time for parameter bundles.</summary>
        </member>
        <member name="M:Techila.Management.PeachImpl.compareState(Techila.Management.PeachImpl.BundleConfig,Techila.Management.PeachImpl.BundleConfig)">
            Compare states. This will change current state!
            <param name="current">current</param>
            <param name="stored">stored</param>
            <returns>true if states are different</returns>
        </member>
        <member name="M:Techila.Management.PeachImpl.message(System.String)">
            Print a message to log and on screen is messages are enabled.
            <param name="message">message</param>
        </member>
        <member name="M:Techila.Management.PeachImpl.compare(System.Object,System.Object)">
            Compare two objects taken into account null values. If both are null,
            returns true, if the other is null and the other is not return false.
            Otherwise return whatever a.Equals(b) returns.
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>compare result</returns>
        </member>
        <member name="T:Techila.Management.Poller">
            <summary>
            Poller thread. Poll project status info every n seconds.
            </summary>
        </member>
        <member name="F:Techila.Management.Poller.DefaultPollTime">
            <summary>Default poll time (in ms).</summary>
        </member>
        <member name="F:Techila.Management.Poller.MinPollTime">
            <summary>Minimum poll time (in ms).</summary>
        </member>
        <member name="F:Techila.Management.Poller.pollTime">
            Time between server status polls (in ms).
        </member>
        <member name="F:Techila.Management.Poller.conn">
            <summary>Server connection wrapper.</summary>
        </member>
        <member name="F:Techila.Management.Poller.log">
            <summary>Logger object.</summary>
        </member>
        <member name="F:Techila.Management.Poller.handles">
            <summary>List of handles to be polled, key = projectid.</summary>
        </member>
        <member name="F:Techila.Management.Poller.actionLock">
            <summary>Locking object for activity.</summary>
        </member>
        <member name="F:Techila.Management.Poller.running">
            <summary>Should this thread be running.</summary>
        </member>
        <member name="F:Techila.Management.Poller.activity">
            <summary>Was there activity in the last poll round.</summary>
        </member>
        <member name="F:Techila.Management.Poller.statusWindow">
            <summary>Status Window wrapper.</summary>
        </member>
        <member name="F:Techila.Management.Poller.stderr">
            <summary>True if errors are to be printed to stderr.</summary>
        </member>
        <member name="F:Techila.Management.Poller.errorFile">
            <summary>File for project errors.</summary>
        </member>
        <member name="F:Techila.Management.Poller.errorDir">
            <summary>Directory for error feeds.</summary>
        </member>
        <member name="F:Techila.Management.Poller.stdoutFile">
            <summary>File for stdout feeds, all.</summary>
        </member>
        <member name="F:Techila.Management.Poller.stderrFile">
            <summary>File for stderr feeds, all.</summary>
        </member>
        <member name="F:Techila.Management.Poller.stdoutDir">
            <summary>Directory for stdout feeds, subdirectories for each project will
              be created.</summary>
        </member>
        <member name="F:Techila.Management.Poller.stderrDir">
            <summary>Directory for stderr feeds, subdirectories for each project will
              be created.</summary>
        </member>
        <member name="F:Techila.Management.Poller.gm">
            <summary>TechilaManager.</summary>
        </member>
        <member name="F:Techila.Management.Poller.swProvider">
            <summary>StatusWindow Provider class.</summary>
        </member>
        <member name="F:Techila.Management.Poller.swconf">
            <summary>Configuration for StatusWindow.</summary>
        </member>
        <member name="M:Techila.Management.Poller.#ctor(Techila.Management.ConnectionWrapper,Techila.Management.TechilaManager,Techila.Management.Logger,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Construct a new Poller instance.</summary>
            <param name="conn">conn</param>
            <param name="log">log</param>
            <param name="stderr">log project errors to STDERR</param>
            <param name="errorFile">file to log project errors to (may be null)</param>
            <param name="pollTime">time beween polls (0 = default)</param>
            <param name="errorDir">errorDir</param>
            <param name="gm">gm</param>
            <param name="stderrDir">stderrDir</param>
            <param name="stderrFile">stderrFile</param>
            <param name="stdoutDir">stdoutDir</param>
            <param name="stdoutFile">stdoutFile</param>
            <param name="swconf">swconf</param>
            <param name="swProvider">swProvider</param>
        </member>
        <member name="M:Techila.Management.Poller.Run">
            <summary>
            Poller thread.
            </summary>
        </member>
        <member name="M:Techila.Management.Poller.Add(Techila.Management.Handle)">
            <summary>Add a project to be polled.</summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.Poller.Remove(Techila.Management.Handle)">
            <summary>Remove a project from poll list.</summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.Poller.StopRunning">
            <summary>Stop the Poller from running.</summary>
        </member>
        <member name="M:Techila.Management.Poller.ActionWait(System.Int64)">
            <summary>Wait for any action, this method returns when any data on any polled
             Handle changes or if the timeout expires.</summary>
             <param name="timeout">max time to wait for action, 0 for forever</param>
             <returns>true if data has changed, otherwise false</returns>
        </member>
        <member name="M:Techila.Management.Poller.SetStatusWindow(Techila.Management.StatusWindow)">
            <summary>
            Set Status Window.
            </summary>
            <param name="sw">Status Window</param>
        </member>
        <member name="M:Techila.Management.Poller.RegisterStatusWindow(Techila.Management.StatusWindow)">
            <summary>
            Register Status Window.
            </summary>
            <param name="sw">Status Window</param>
        </member>
        <member name="M:Techila.Management.Poller.UnregisterStatusWindow(Techila.Management.StatusWindow)">
            <summary>
            Unregister Status Window.
            </summary>
            <param name="sw">Status Window</param>
        </member>
        <member name="M:Techila.Management.Poller.GetStatusWindowImplementation">
            <summary>
            Get current Status Window
            </summary>
            <returns>Status Window</returns>
        </member>
        <member name="M:Techila.Management.Poller.Poll(Techila.Management.Handle)">
            <summary>Poll specified project immediately. The project/handle should not be
            in the list of pollables (not added before).</summary>
            <param name="handle">handle</param>
        </member>
        <member name="P:Techila.Management.Poller.PollTime">
            <summary>Get the poll interval.</summary>
        </member>
        <member name="P:Techila.Management.Poller.StatusWindow">
            <summary>
            Get / Create the Status Window.
            </summary>
            <returns>status window</returns>
        </member>
        <member name="M:Techila.Management.Poller.Poll">
            <summary>Do a single poll on the server and ask information on all the
            projects listed for polling. Update the internal handles information
            is changes have occured.</summary>
        </member>
        <member name="M:Techila.Management.Poller.Poll(System.Collections.Generic.Dictionary{System.Int32,Techila.Management.Handle})">
            <summary>Poll listed projects and update handles.</summary>
            <param name="pollHandles">pollHandles</param>
        </member>
        <member name="M:Techila.Management.Poller.GetNewResults(Techila.Management.Handle)">
            <summary>Get the new results that have completed since last get.</summary>
            <param name="handle">handle</param>
        </member>
        <member name="T:Techila.Management.ProjectManager">
            <summary>
            Methods for Project Management.
            </summary>
        </member>
        <member name="T:Techila.Management.ProjectManager.Priority">
            <summary>
            Project Priority
            </summary>
        </member>
        <member name="F:Techila.Management.ProjectManager.Priority.Highest">
            <summary>Highest priority.</summary>
        </member>
        <member name="F:Techila.Management.ProjectManager.Priority.High">
            <summary>High priority.</summary>
        </member>
        <member name="F:Techila.Management.ProjectManager.Priority.AboveNormal">
            <summary>Above normal priority.</summary>
        </member>
        <member name="F:Techila.Management.ProjectManager.Priority.Normal">
            <summary>Normal priority.</summary>
        </member>
        <member name="F:Techila.Management.ProjectManager.Priority.BelowNormal">
            <summary>Below normal priority.</summary>
        </member>
        <member name="F:Techila.Management.ProjectManager.Priority.Low">
            <summary>Low priority.</summary>
        </member>
        <member name="F:Techila.Management.ProjectManager.Priority.Lowest">
            <summary>Lowest priority, running jobs may be removed if necessary.</summary>
        </member>
        <member name="F:Techila.Management.ProjectManager.JobWaiting">
            <summary>Job status waiting.</summary>
        </member>
        <member name="F:Techila.Management.ProjectManager.JobExpired">
            <summary>Job status expired.</summary>
        </member>
        <member name="F:Techila.Management.ProjectManager.JobWorking">
            <summary>Job status working.</summary>
        </member>
        <member name="F:Techila.Management.ProjectManager.JobReady">
            <summary>Job status ready.</summary>
        </member>
        <member name="F:Techila.Management.ProjectManager.JobCancelled">
            <summary>Job status cancelled.</summary>
        </member>
        <member name="M:Techila.Management.ProjectManager.#ctor(Techila.Management.Common,Techila.Management.Logger)">
            <summary>
            Construct a new ProjectManager instance.
            </summary>
            <param name="common">common</param>
            <param name="log">log</param>
        </member>
        <member name="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String,System.String[])">
            <summary>
            Create a project, create jobs with given parameters (using a splitter),
            assign clients and start the project.
            </summary>
            <see cref="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            <example>
            <code>
            Hashtable&lt;String, String&gt; params =
              new Hashtable&lt;String, String&gt;();
            ProjectManager projectManager = techila.projectManager();
            int statuscode = projectManager.createProject(handle,
              ManagementInterface.PRIORITY_NORMAL, "a project...", params);
            if (statuscode == Support.OK) {
              projectManager.waitCompletion(handle);
              // [...]
            }
            </code>
            </example>
            <see cref="M:Techila.Management.BundleManager.UseBundle(Techila.Management.Handle,System.String)"/>
            <see cref="M:Techila.Management.BundleManager.UseBundle(Techila.Management.Handle,System.String,System.String)"/>
            <see cref="M:Techila.Management.BundleManager.CreateBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})"/>
            <param name="handle">handle</param>
            <param name="priority">priority</param>
            <param name="description">project description</param>
            <param name="parameters">project parameters</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a project, create jobs with given parameters, assign clients
            and start the project. Used bundle must be set before creating a
            project.
            </summary>
            <example>
            <code>
            Hashtable&lt;String, String&gt; params =
              new Hashtable&lt;String, String&gt;();
            ProjectManager projectManager = techila.projectManager();
            int statuscode = projectManager.createProject(handle,
              ManagementInterface.PRIORITY_NORMAL, "a project...", params);
            if (statuscode == Support.OK) {
              projectManager.waitCompletion(handle);
              // [...]
            }
            </code>
            </example>
            <see cref="M:Techila.Management.BundleManager.UseBundle(Techila.Management.Handle,System.String)"/>
            <see cref="M:Techila.Management.BundleManager.UseBundle(Techila.Management.Handle,System.String,System.String)"/>
            <see cref="M:Techila.Management.BundleManager.CreateBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})"/>
            <param name="handle">handle</param>
            <param name="priority">priority</param>
            <param name="description">project description</param>
            <param name="parameters">project parameters</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String)">
            <summary>
            Create an empty project. Used bundle must be set before creating a
            project. Use <see cref="M:Techila.Management.ProjectManager.CreateProjectJobs(Techila.Management.Handle,System.String[])"/> (or <see cref="M:Techila.Management.ProjectManager.CreateJob(Techila.Management.Handle,System.String[])"/>)
            to create jobs in the project. Also use <see cref="M:Techila.Management.ProjectManager.MarkAllJobsCreated(Techila.Management.Handle)"/>,
            <see cref="M:Techila.Management.ProjectManager.AddUserClientsToProject(Techila.Management.Handle)"/> and <see cref="M:Techila.Management.ProjectManager.StartProject(Techila.Management.Handle)"/>.
            </summary>
            <see cref="M:Techila.Management.BundleManager.UseBundle(Techila.Management.Handle,System.String)"/>
            <see cref="M:Techila.Management.BundleManager.UseBundle(Techila.Management.Handle,System.String,System.String)"/>
            <see cref="M:Techila.Management.BundleManager.CreateBundle(Techila.Management.Handle,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})"/>
            <see cref="M:Techila.Management.ProjectManager.CreateProjectJobs(Techila.Management.Handle,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            <see cref="M:Techila.Management.ProjectManager.CreateJob(Techila.Management.Handle,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            <see cref="M:Techila.Management.ProjectManager.MarkAllJobsCreated(Techila.Management.Handle)"/>
            <see cref="M:Techila.Management.ProjectManager.AddUserClientsToProject(Techila.Management.Handle)"/>
            <see cref="M:Techila.Management.ProjectManager.StartProject(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <param name="priority">priority</param>
            <param name="description">description</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.CreateProjectJobs(Techila.Management.Handle,System.String[])">
            <summary>
             Create jobs for the project using given parameters.
             </summary>
             <see cref="M:Techila.Management.ProjectManager.CreateProjectJobs(Techila.Management.Handle,System.Collections.Generic.Dictionary{System.String,System.String})"/>
             <see cref="M:Techila.Management.ProjectManager.CreateProjectJobs(Techila.Management.Handle,System.Collections.Generic.Dictionary{System.String,System.String})"/>
             <param name="handle">handle</param>
             <param name="parameters">project parameters, String array of
             "param name = param value" pairs</param>
             <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.CreateProjectJobs(Techila.Management.Handle,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Create jobs for the project using given parameters. This method is
             used to pass parameters to the splitter. The splitter will then
             create the jobs.
             </summary>
             <example>
             <code>
             Dictionary&lt;String, String&gt; params =
               new Dictionary&lt;String, String&gt;();
             params.Put("jobs", "9");
             params.Put("value1", "42");
             params.Put("value2", "1.2");
             int statuscode = projectManager.createProjectJobs(handle, params);
             </code>
             </example>
             <see cref="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String)"/>
             <param name="handle">handle</param>
             <param name="pparams">project parameters</param>
             <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.CreateProjectJobs(Techila.Management.Handle,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
             Create jobs for the project using given parameters. The amount of jobs
             is the amount of elements in <c>jobParams</c> vector. If the
             <c>jobParams</c> contains parameters which are also in the
             <c>CommonParams</c>, the <c>jobParams</c> will
             override the value on <c>commonParams</c>. Remember to call
             <see cref="M:Techila.Management.ProjectManager.MarkAllJobsCreated(Techila.Management.Handle)"/> after all jobs have been created.
             With large number of jobs it is better to use a splitter.
             </summary>
             <example>
             <code>
             // fill common parameters
             Hashtable&lt;String, String&gt; commonParams =
               new Hashtable&lt;String, String&gt;();
             commonParams.put("value1", "42");
             commonParams.put("value2", "1.2");
             Vector&lt;Hashtable&lt;String, String&gt;&gt; jobParams =
               new Vector&lt;Hashtable&lt;String, String&gt;&gt;()
             // create job parameters for 9 jobs
             for (int i = 1; i &lt;= 9; i++) {
               Hashtable&lt;String, String&gt; jp =
               new Hashtable&lt;String, String&gt;();
               jp.put("jobidx", Integer.toString(i));
               jobParams.add(jp);
             }
             ProjectManager projectManager = techila.projectManager();
             int statuscode = projectManager.createProjectJobs(handle, commonParams,
               jobParams);
             if (statuscode == Support.OK) {
               projectManager.markAllJobsCreated(handle);
               // [...]
             }
             </code>
             </example>
             <see cref="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String)"/>
             <see cref="M:Techila.Management.ProjectManager.MarkAllJobsCreated(Techila.Management.Handle)"/>
             <param name="handle">handle</param>
             <param name="commonParams">common parameters for all jobs</param>
             <param name="jobParams">Vector of parameters for each job</param>
             <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.AddUserClientsToProject(Techila.Management.Handle)">
            <summary>
            Add all user assigned clients to the project.
            </summary>
            <see cref="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String)"/>
            <param name="handle">handle</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.StartProject(Techila.Management.Handle)">
            <summary>
            Start the project.
            </summary>
            <see cref="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String)"/>
            <param name="handle">handle</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.StopProject(Techila.Management.Handle)">
            <summary>
            Stop the project.
            </summary>
            <param name="handle">handle</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.RemoveProject(Techila.Management.Handle)">
            <summary>
            Remove the project.
            </summary>
            <param name="handle">handle</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.CreateJob(Techila.Management.Handle,System.String[])">
            <summary>
            Create a job for the project associated with the specified handle.
            The project must be already created. Remember to call
            <see cref="M:Techila.Management.ProjectManager.MarkAllJobsCreated(Techila.Management.Handle)"/> after all jobs have been created.
            With large number of jobs it is better to use a splitter.
            </summary>
            <see cref="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String)"/>
            <see cref="M:Techila.Management.ProjectManager.MarkAllJobsCreated(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <param name="parameters">job parameters</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.CreateJob(Techila.Management.Handle,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a job for the project associated with the specified handle.
            The project must be already created. Remember to call
            <see cref="M:Techila.Management.ProjectManager.MarkAllJobsCreated(Techila.Management.Handle)"/> after all jobs have been created.
            With large number of jobs it is better to use a splitter.
            </summary>
            <see cref="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String)"/>
            <see cref="M:Techila.Management.ProjectManager.MarkAllJobsCreated(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <param name="jparams">job parameters</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.CreateCachedJob(Techila.Management.Handle,System.String[])">
            <summary>
            Create an internally cached job. Job won't be created on the server
            until <see cref="M:Techila.Management.ProjectManager.FlushCachedJobs(Techila.Management.Handle)"/> is called. This will automatically
            call <see cref="M:Techila.Management.ProjectManager.FlushCachedJobs(Techila.Management.Handle)"/> if the amount of jobs in the internal
            list exceeds 100. Remember to call <see cref="M:Techila.Management.ProjectManager.FlushCachedJobs(Techila.Management.Handle)"/> and
            <see cref="M:Techila.Management.ProjectManager.MarkAllJobsCreated(Techila.Management.Handle)"/>.
            </summary>
            <see cref="M:Techila.Management.ProjectManager.CreateJob(Techila.Management.Handle,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            <see cref="M:Techila.Management.ProjectManager.FlushCachedJobs(Techila.Management.Handle)"/>
            <see cref="M:Techila.Management.ProjectManager.MarkAllJobsCreated(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <param name="parameters">job parameters</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.CreateCachedJob(Techila.Management.Handle,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create an internally cached job. Job won't be created on the server
            until <see cref="M:Techila.Management.ProjectManager.FlushCachedJobs(Techila.Management.Handle)"/> is called. This will automatically
            call <see cref="M:Techila.Management.ProjectManager.FlushCachedJobs(Techila.Management.Handle)"/> if the amount of jobs in the internal
            list exceeds 100. Remember to call <see cref="M:Techila.Management.ProjectManager.FlushCachedJobs(Techila.Management.Handle)"/> and
            <see cref="M:Techila.Management.ProjectManager.MarkAllJobsCreated(Techila.Management.Handle)"/>.
            </summary>
            <see cref="M:Techila.Management.ProjectManager.CreateJob(Techila.Management.Handle,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            <see cref="M:Techila.Management.ProjectManager.FlushCachedJobs(Techila.Management.Handle)"/>
            <see cref="M:Techila.Management.ProjectManager.MarkAllJobsCreated(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <param name="jparams">job parameters</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.FlushCachedJobs(Techila.Management.Handle)">
            <summary>
            Flush cached jobs from internal list and create them on the server.
            Call <see cref="M:Techila.Management.ProjectManager.MarkAllJobsCreated(Techila.Management.Handle)"/> after this.
            </summary>
            <see cref="M:Techila.Management.ProjectManager.CreateCachedJob(Techila.Management.Handle,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            <see cref="M:Techila.Management.ProjectManager.MarkAllJobsCreated(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.MarkAllJobsCreated(Techila.Management.Handle)">
            <summary>
            Mark all jobs in the project created. Used after <see cref="M:Techila.Management.ProjectManager.CreateJob(Techila.Management.Handle,System.String[])"/>.
            Do not use with splitter.
            </summary>
            <see cref="M:Techila.Management.ProjectManager.CreateProject(Techila.Management.Handle,Techila.Management.ProjectManager.Priority,System.String)"/>
            <see cref="M:Techila.Management.ProjectManager.CreateJob(Techila.Management.Handle,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            <see cref="M:Techila.Management.ProjectManager.CreateProjectJobs(Techila.Management.Handle,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.String}})"/>
            <param name="handle">handle</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.SetProjectId(Techila.Management.Handle,System.Int32)">
            <summary>
            Set project id for the specified handle. Used to bind a handle to
            a previously created project.
            </summary>
            <param name="handle">handle</param>
            <param name="projectId">projectId</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetProjectId(Techila.Management.Handle)">
            <summary>
            Get the project id associated with the specified handle.
            </summary>
            <param name="handle">handle</param>
            <returns>project id (positive) or status code (negative)</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.WaitCompletion(Techila.Management.Handle)">
            <summary>
            Wait for project completion. This method will return when the
            project has finished (either successfully or stopped by the user
            or by an error). The returned status code does not reflect the
            status of the finished project, only the status of the wait operation.
            </summary>
            <see cref="M:Techila.Management.ProjectManager.GetProjectStatus(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <returns>status code of the wait operation</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.WaitCompletionBG(Techila.Management.Handle)">
            <summary>
            Wait for project completion in the background. A background thread
            polls the project status and other values (e.g. ready jobs) from
            the server. Project completion status can be checked with isCompleted
            method.
            </summary>
            <example><code>
            ProjectManager projectManager = techila.projectManager();
            int statuscode = projectManager.waitCompletionBG(handle);
            if (statuscode == Support.OK) {
              while (!projectManager.isCompleted(handle)) {
                projectManager.actionWait(handle, 60000);
              }
            }
            </code></example>
            <see cref="M:Techila.Management.ProjectManager.StopWaitingBG(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.StopWaitingBG(Techila.Management.Handle)">
            <summary>
            Stop the polling for the project status in the background thread.
            </summary>
            <param name="handle">handle</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.ActionWait(System.Int64)">
            <summary>
            Wait for activity in the projects. This method returns when any
            activity is detected in the projects set to be polled with
            <see cref="M:Techila.Management.ProjectManager.WaitCompletionBG(Techila.Management.Handle)"/> method. Activity means that some of
            the polled values have changed from the previous poll (e.g. ready
            jobs increases and waiting jobs decreases). The method will also
            return if the timeout has been reached.
            </summary>
            <example>
            <code>
            ProjectManager projectManager = techila.projectManager();
            // wait 60 seconds for activity
            bool activity = projectManager.actionWait(60000);
            </code>
            </example>
            <see cref="M:Techila.Management.ProjectManager.WaitCompletionBG(Techila.Management.Handle)"/>
            <param name="timeout">timeout</param>
            <returns>true if data has changed, otherwise (and if no Poller is active) false</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.IsCompleted(Techila.Management.Handle)">
            <summary>
            Is the project associated with the handle completed. This method
            will return true if the project has finished and no more processing
            is done. The project may have failed and the result is not available,
            use <see cref="M:Techila.Management.ProjectManager.IsFailed(Techila.Management.Handle)"/> to get that information.
            </summary>
            <example><code>
            ProjectManager projectManager = techila.projectManager();
            bool completed = projectManager.isCompleted(handle);
            </code></example>
            <see cref="M:Techila.Management.ProjectManager.GetProjectStatus(Techila.Management.Handle)"/>
            <see cref="M:Techila.Management.ProjectManager.IsFailed(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <returns>true if completed</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.IsJobCompleted(Techila.Management.Handle)">
            <summary>
            Is the job completed... (TODO: add param for jobid).
            </summary>
            <param name="handle">handle</param>
            <returns>true if job is completes</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.IsFailed(Techila.Management.Handle)">
            <summary>
            Has the project associated with the handle failed.
            </summary>
            <example><code>
            ProjectManager projectManager = techila.projectManager();
            bool isFailed = projectManager.isFailed(handle);
            </code></example>
            <param name="handle">handle</param>
            <returns>true if failed</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetProjectStatus(Techila.Management.Handle)">
            <summary>
            Get the project status associated with the handle.
            </summary>
            <example><code>
            ProjectManager projectManager = techila.projectManager();
            int status = projectManager.getProjectStatus(handle);
            </code></example>
            <param name="handle">handle</param>
            <returns>error code (&lt; 0) or project status (&gt;= 0)</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetProjectDescription(Techila.Management.Handle)">
            <summary>
            Get the project description. This may contain error messages from
            the splitter.
            </summary>
            <param name="handle">handle</param>
            <returns>description field of the project.</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.Ready(Techila.Management.Handle)">
            <summary>
            Get the percentage of ready jobs in the project as an integer.
            The result is rounded down to the nearest integer. Returns 100
            when all the jobs have finished.
            </summary>
            <param name="handle">handle</param>
            <returns>the percentage of ready jobs</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetUsedCpuTime(Techila.Management.Handle)">
            <summary>
            Get the used CPU time for the project.
            </summary>
            <param name="handle">handle</param>
            <returns>the used CPU time in seconds or error code (&lt;0).</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetUsedTime(Techila.Management.Handle)">
            <summary>
            Get the used wall clock time for the project.
            </summary>
            <param name="handle">handle</param>
            <returns>the used time in seconds or error code (&lt;0).</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetLastError(Techila.Management.Handle)">
            <summary>
            Get the error / status code of the last background poll operation.
            </summary>
            <param name="handle">handle</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetErrors(Techila.Management.Handle)">
            <summary>
            Download project errors to a local file.
            </summary>
            <see cref="M:Techila.Management.ProjectManager.ParseErrors(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetErrors(Techila.Management.Handle,System.Boolean)">
            <summary>
            Download project errors to a local file, optinally incrementally.
            </summary>
            <param name="handle">handle</param>
            <param name="incremental">incremental</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetErrorFile(Techila.Management.Handle)">
            <summary>
            Get the file name where the errors have been stored (XML).
            </summary>
            <param name="handle">handle</param>
            <returns>the filename with full path</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.ParseErrors(Techila.Management.Handle)">
            <summary>
            Parse the errors in the errors file into internal format. This must be
            called after <see cref="M:Techila.Management.ProjectManager.GetErrors(Techila.Management.Handle)"/> and before any other error handling
             methods (except <see cref="M:Techila.Management.ProjectManager.GetErrorFile(Techila.Management.Handle)"/>).
            </summary>
            <see cref="M:Techila.Management.ProjectManager.GetErrors(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetErrorJobIds(Techila.Management.Handle)">
            <summary>
            Get a list of job ids which have errors.
            </summary>
            <param name="handle">handle</param>
            <returns>job ids</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetJobErrorCount(Techila.Management.Handle,System.Int64)">
            <summary>
            Get the number of errors for given job.
            </summary>
            <param name="handle">handle</param>
            <param name="jobid">jobid</param>
            <returns>number of jobs (or error code &lt; 1)</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetJobErrorMessage(Techila.Management.Handle,System.Int64,System.Int32)">
            <summary>
            Get the error message for a given job at specified index.
            </summary>
            <param name="handle">handle</param>
            <param name="jobid">jobid</param>
            <param name="msgIndex">msgIndex</param>
            <returns>error message</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetJobErrorMessageObject(Techila.Management.Handle,System.Int64,System.Int32)">
            <summary>
            Get the message object for an error.
            </summary>
            <param name="handle">handle</param>
            <param name="jobid">jobid</param>
            <param name="msgIndex">msgIndex</param>
            <returns>Message</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.SetProjectParams(Techila.Management.Handle,System.String[])">
            <summary>
            Set project's control parameters.
            </summary>
            <param name="handle">handle</param>
            <param name="pparams">project parameters</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.SetProjectParams(Techila.Management.Handle,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set project's control parameters.
            </summary>
            <param name="handle">handle</param>
            <param name="pparams">project parameters</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetProjectParams(Techila.Management.Handle)">
            <summary>
            Get project's parameters.
            </summary>
            <param name="handle">handle</param>
            <returns>project parameters</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetProjectStatistic(Techila.Management.Handle,System.String)">
            <summary>
            Get project's statistic.
            </summary>
            <param name="handle">handle</param>
            <param name="key">key to statistics data</param>
            <returns>project statistic value</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetProjectStatistics(Techila.Management.Handle)">
            <summary>
            Get project's statistics.
            </summary>
            <param name="handle">handle</param>
            <returns>project statistics</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.PrintStatistics(Techila.Management.Handle)">
            <summary>
            Print project statistics into stdout.
            </summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.ProjectManager.PrintStatistics(Techila.Management.Handle,System.IO.Stream)">
            <summary>
            Print project statistics into given stream.
            </summary>
            <param name="handle">handle</param>
            <param name="os">os</param>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetStatisticsString(Techila.Management.Handle)">
            <summary>
            Get the statistics as a String.
            </summary>
            <param name="handle">handle</param>
            <returns>statistics String</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetProjectParamValue(Techila.Management.Handle,System.String)">
            <summary>
            Get value of project parameter.
            </summary>
            <param name="handle">handle</param>
            <param name="key">the project parameter key</param>
            <returns>project parameter value</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetProjectParamCount(Techila.Management.Handle)">
            <summary>
            Get count of project parameters.
            </summary>
            <param name="handle">handle</param>
            <returns>the count of project parameters</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetProjectParamName(Techila.Management.Handle,System.Int32)">
            <summary>
            Get project parameter name in specified index.
            </summary>
            <param name="handle">handle</param>
            <param name="index">the parameter index</param>
            <returns>the parameter name</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.ModifyPerm(System.Int32,System.String,System.String)">
            <summary>
            Modify project permissions. Currently only adding permissions is possible.
            </summary>
            <param name="projectid">projectid</param>
            <param name="userName">userName</param>
            <param name="perms">perms</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetJobInfo(System.Int64)">
            <summary>
            Get information of given job.
            </summary>
            <param name="jobid">the id of the job</param>
            <returns>Job Information</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetJobInfo(Techila.Management.Handle,System.Int64)">
            <summary>
            Get information of given job.
            </summary>
            <param name="handle">handle</param>
            <param name="jobid">the id of the job</param>
            <returns>Job Information</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetProjectJobsByStatus(Techila.Management.Handle,System.Int32)">
            <summary>
            Get list of project jobs having given status.
            </summary>
            <param name="handle">handle</param>
            <param name="status">job status</param>
            <returns>job ids</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.SendJobCommand(System.Int64,System.String)">
            <summary>
            Send given command to stdin of job.
            </summary>
            <param name="jobid">the id of the job</param>
            <param name="command">the command</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.SendJobCommand(Techila.Management.Handle,System.Int64,System.String)">
            <summary>
            Send given command to stdin of job.
            </summary>
            <param name="handle">handle</param>
            <param name="jobid">the id of the job</param>
            <param name="command">the command</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.SendJobPostParameter(System.Int64,System.String)">
            <summary>
            Execute given command as parsed job parameter.
            </summary>
            <param name="jobid">the id of the job</param>
            <param name="command">the parameters to parse</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.SendJobPostParameter(Techila.Management.Handle,System.Int64,System.String)">
            <summary>
            Execute given command as parsed job parameter.
            </summary>
            <param name="handle">handle</param>
            <param name="jobid">the id of the job</param>
            <param name="command">the parameters to parse</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.SendJobPostParameter(System.String[],System.String)">
            <summary>
            Execute given command as parsed job parameter.
            </summary>
            <param name="jobids">the ids of the jobs</param>
            <param name="command">the parameters to parse</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.SendJobPostParameter(Techila.Management.Handle,System.String[],System.String)">
            <summary>
            Execute given command as parsed job parameter.
            </summary>
            <param name="handle">handle</param>
            <param name="jobids">the ids of the jobs</param>
            <param name="command">the parameters to parse</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.getActiveProjects">
            <summary>
            List active projects.
            </summary>
            <returns>List of active projects</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.getWaitingProjects">
            <summary>
            List waiting projects.
            </summary>
            <returns>List of waiting projects</returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.SetProjectPriority(System.Int32,Techila.Management.ProjectManager.Priority)">
            <summary>
            Set project priority for the given project id.
            </summary>
            <param name="projectId">the id of the project</param>
            <param name="p">the priority</param>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.ProjectManager.GetProjectPriority(System.Int32)">
            <summary>
            Get project priority for the given project id.
            </summary>
            <param name="projectId">the id of the project</param>
            <returns></returns>
        </member>
        <member name="T:Techila.Management.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Techila.Management.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Techila.Management.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Techila.Management.PS.Cell">
            <summary>
            Wrapper for Cell type.
            </summary>
        </member>
        <member name="M:Techila.Management.PS.Cell.#ctor(System.Object)">
            <summary>
            Wrap object to Cell.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Techila.Management.PS.Cell.Get">
            <summary>
            Get object from Cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.PS.Cell.Set(System.Object)">
            <summary>
            Wrap object to existing Cell.
            </summary>
            <param name="o"></param>
        </member>
        <member name="T:Techila.Management.PS.Complex">
            <summary>
            Complex Number.
            </summary>
        </member>
        <member name="M:Techila.Management.PS.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Create Complex number.
            </summary>
            <param name="real">real part</param>
            <param name="imag">imaginary part</param>
        </member>
        <member name="M:Techila.Management.PS.Complex.getReal">
            <summary>
            Get real part of complex number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.PS.Complex.getImag">
            <summary>
            Get imaginary part of complex number.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Techila.Management.PS.Control">
            <summary>
            Control parameters for proxy.
            </summary>
        </member>
        <member name="T:Techila.Management.PS.Control.CleanMode">
            <summary>
            Cleaning mode.
            </summary>
        </member>
        <member name="F:Techila.Management.PS.Control.CleanMode.Never">
            <summary>
            Do not clean
            </summary>
        </member>
        <member name="F:Techila.Management.PS.Control.CleanMode.Detach">
            <summary>
            Clean on detach
            </summary>
        </member>
        <member name="F:Techila.Management.PS.Control.CleanMode.Finish">
            <summary>
            Clean after results are received
            </summary>
        </member>
        <member name="F:Techila.Management.PS.Control.CleanMode.Always">
            <summary>
            Clean on both; on detach and after the results are received
            </summary>
        </member>
        <member name="M:Techila.Management.PS.Control.#ctor(System.Type)">
            <summary>
            Execution control parameters.
            </summary>
            <param name="resultType">The inner result type for MultipleOutputs results.</param>
        </member>
        <member name="M:Techila.Management.PS.Control.#ctor(System.Boolean)">
            <summary>
            Execution control parameters.
            </summary>
            <param name="detach">Detach the execution, attach back by giving the same Control object to a new call.</param>
        </member>
        <member name="M:Techila.Management.PS.Control.#ctor(System.Boolean,Techila.Management.PS.Control.CleanMode)">
            <summary>
            Execution control parameters.
            </summary>
            <param name="detach">Detach the execution, attach back by giving the same Control object to a new call.</param>
            <param name="clean">Clean the environment.</param>
        </member>
        <member name="M:Techila.Management.PS.Control.#ctor(Techila.Management.Peach)">
            <summary>
            Execution control parameters.
            </summary>
            <param name="peach">Use existing Peach object.</param>
        </member>
        <member name="M:Techila.Management.PS.Control.#ctor(System.Int32)">
            <summary>
            Execution control parameters.
            </summary>
            <param name="projectId">The project Id of the previously started/executed project for attaching.</param>
        </member>
        <member name="M:Techila.Management.PS.Control.#ctor(System.Type,System.Boolean)">
            <summary>
            Execution control parameters.
            </summary>
            <param name="resultType">The inner result type for MultipleOutputs results.</param>
            <param name="detach">Detach the execution, attach back by giving the same Control object to a new call.</param>
        </member>
        <member name="M:Techila.Management.PS.Control.#ctor(System.Type,System.Boolean,Techila.Management.PS.Control.CleanMode)">
            <summary>
            Execution control parameters.
            </summary>
            <param name="resultType">The inner result type for MultipleOutputs results</param>
            <param name="detach">Detach the execution, attach back by giving the same Control object to a new call.</param>
            <param name="clean">Clean the environment.</param>
        </member>
        <member name="M:Techila.Management.PS.Control.#ctor(System.Type,System.Int32)">
            <summary>
            Execution control parameters.
            </summary>
            <param name="resultType">The inner result type for MultipleOutputs results</param>
            <param name="projectId">The project Id of the previously started/executed project for attaching.</param>
        </member>
        <member name="M:Techila.Management.PS.Control.#ctor(System.Type,Techila.Management.Peach,System.Boolean,Techila.Management.PS.Control.CleanMode)">
            <summary>
            Execution control parameters.
            </summary>
            <param name="resultType">The inner result type for MultipleOutputs results</param>
            <param name="peach">Use existing Peach object.</param>
            <param name="detach">Detach the execution, attach back by giving the same Control object to a new call.</param>
            <param name="clean">Clean the environment.</param>
        </member>
        <member name="M:Techila.Management.PS.Control.setLogging(System.Boolean)">
            <summary>
            Set logging of the job execution.
            </summary>
            <param name="value">true to activate</param>
        </member>
        <member name="M:Techila.Management.PS.Control.isLogging">
            <summary>
            Get the state of the logging.
            </summary>
            <returns>true if activated</returns>
        </member>
        <member name="M:Techila.Management.PS.Control.setCatchErrors(System.Boolean)">
            <summary>
            Set catching of the errors in the jobs.
            </summary>
            <param name="value">true to activate</param>
        </member>
        <member name="M:Techila.Management.PS.Control.isCatchErrors">
            <summary>
            Get the state of the error catching.
            </summary>
            <returns>true if activated</returns>
        </member>
        <member name="M:Techila.Management.PS.Control.getError">
            @return the first error entry
        </member>
        <member name="M:Techila.Management.PS.Control.getError(System.Int32)">
            @param id the id of the error entry
            @return the error
        </member>
        <member name="M:Techila.Management.PS.Control.isError">
            @return true if any call has failed
        </member>
        <member name="M:Techila.Management.PS.Control.getLog">
            @return first log entry
        </member>
        <member name="M:Techila.Management.PS.Control.getLog(System.Int32)">
            @param id the id of the log entry
            @return the log entry
        </member>
        <member name="M:Techila.Management.PS.Function.#ctor(System.String)">
            Create function.
            @param function function string
        </member>
        <member name="M:Techila.Management.PS.Function.#ctor(System.String,Techila.Management.PS.Struct)">
            Create function.
            @param function function string
            @param workspace function workspace
        </member>
        <member name="M:Techila.Management.PS.Function.getFunction">
            Get Function.
            @return function string
        </member>
        <member name="M:Techila.Management.PS.Function.getWorkspace">
            Get Function workspace;
            @return function workspace
        </member>
        <member name="T:Techila.Management.PS.GenericStruct">
            <summary>
            A generic struct implementation.
            </summary>
        </member>
        <member name="M:Techila.Management.PS.GenericStruct.getFieldNames">
            <summary>
            List field names of the struct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.PS.GenericStruct.getValues">
            <summary>
            Get struct values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.PS.GenericStruct.get(System.String)">
            <summary>
            Get a field by name.
            </summary>
            <param name="fieldName">field name</param>
            <returns>field value</returns>
        </member>
        <member name="T:Techila.Management.PS.Helpers">
            <summary>
            Gelper functions for serializing and deserializing data.
            </summary>
        </member>
        <member name="M:Techila.Management.PS.Helpers.serialize(System.Object)">
            <summary>
            Serialize object.
            </summary>
            <param name="o"></param>
            <returns>object serialized into byte array</returns>
        </member>
        <member name="M:Techila.Management.PS.Helpers.serialize(System.Object,System.IO.BinaryWriter)">
            <summary>
            Serialize object into given writer.
            </summary>
            <param name="o"></param>
            <param name="baos"></param>
        </member>
        <member name="M:Techila.Management.PS.Helpers.serializeCell(System.Object,System.IO.BinaryWriter,System.Boolean,System.Int32[],System.Int32)">
            Serialize Cell to given Outputstream.
            @param o
            @param baos
            @param tag include cell tag and dimensions
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.serializeStruct(System.Object,System.IO.BinaryWriter,System.Boolean)">
            Serialize Struct to given Outputstream.
            @param o
            @param baos
            @param tag include struct tag, field names and dimensions
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.serializeLogical(System.Object,System.IO.BinaryWriter,System.Boolean)">
            Serialize Boolean to given Outputstream.
            @param n
            @param baos
            @param tag include tag and dimensions
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.serializeString(System.Object,System.IO.BinaryWriter,System.Boolean)">
            Serialize String to given Outputstream.
            @param n
            @param baos
            @param tag include tag
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.writeArrayDimensions(System.Object,System.IO.BinaryWriter)">
            Write dimensions of an Array to outputstream.
            @param n Array
            @param baos
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.writeArrayDimensions(System.Object,System.IO.BinaryWriter,System.Boolean)">
            Write dimensions of an Array to outputstream.
            @param n Array
            @param baos
            @param longdim use 32bit value for dimension, default is false (one byte)
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.serializeNumber(System.Object,System.IO.BinaryWriter)">
            Serialize numeric value into outputstream.
            @param n
            @param baos
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.serializeNumericMatrix(System.Object,System.IO.BinaryWriter,System.Boolean)">
            Serialize numeric array/matrix into outputstream.
            @param n
            @param baos
            @param tag include tag and dimensions
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.serializeScalar(System.Object,System.IO.BinaryWriter,System.Boolean)">
            Serialize numeric scalar into outputstream.
            @param n
            @param baos
            @param tag include tag
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.getTag(System.Type)">
            Tag for different types.
            @param o
            @return
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserialize(System.Byte[])">
            Deserialize given byte array into object.
            @param b
            @return deserialized object
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserialize(System.Byte[],System.Type)">
            Deserialize given byte array into object of given class.
            @param b
            @param s result object type
            @return deserialized object
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserialize(System.Byte[],System.Type,System.Type)">
            Deserialize given byte array into object of given class.
            @param b
            @param s result object type
            @return deserialized object
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserialize(System.IO.BinaryReader)">
            Deserialize given BinaryReader into object.
            @param bais
            @return deserialized object
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserialize(System.IO.BinaryReader,System.Type)">
            Deserialize given BinaryReader into object of given class.
            @param bais
            @param s result object type
            @return deserialized object
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserialize(System.IO.BinaryReader,System.Type,System.Type)">
            Deserialize given BinaryReader into object of given class.
            @param bais
            @param s result object type
            @return deserialized object
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.parse(System.Object,System.Type)">
            Parse object and try to change it to requested type.
            @param o
            @param s
            @return
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserializeComplex(System.IO.BinaryReader)">
            Deserialize complex number from BinaryReader into Object. 
            @param bais
            @return
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserializeScalar(System.IO.BinaryReader,System.Int32)">
            Deserialize scalar from BinaryReader into Object.
            @param bais
            @param type
            @return
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserializeString(System.IO.BinaryReader,System.Int32)">
            Deserialize String from BinaryReader into Object.
            @param bais
            @param type
            @return
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserializeChar(System.IO.BinaryReader,System.Boolean)">
            Deserialize character (array) from BinaryReader into Object.
            @param bais
            @return
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserializeLogical(System.IO.BinaryReader)">
            Deserialize bool (array) from BinaryReader into Object.
            @param bais
            @return
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.readDimensions(System.IO.BinaryReader)">
            Read array dimensions from BinaryReader. 
            @param bais
            @return
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserializeNumeric(System.IO.BinaryReader,System.Int32)">
            Deserialize numeric array from BinaryReader into Object.
            @param bais
            @param type
            @return
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserializeStruct(System.IO.BinaryReader,System.Type,System.Type)">
            Deserialize Struct from BinaryReader into Object.
            @param bais
            @param c
            @return
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserializeCell(System.IO.BinaryReader)">
            Deserialize cell from BinaryReader into Object.
            @param bais
            @return
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserializeCell(System.IO.BinaryReader,System.Int32)">
            Deserialize cell with given type from BinaryReader into Object.
            @param bais
            @param type
            @return
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserializeMatrixHelper(System.IO.BinaryReader,System.Object)">
            Helper function for deserializing matrices.
            @param bais BinaryReader
            @param result 
            @return
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserializeMatrixHelper(System.IO.BinaryReader,System.Object,System.Type)">
            Helper function for deserializing matrices.
            @param bais BinaryReader
            @param result 
            @param clazz class of matrix cells
            @return
            @
        </member>
        <member name="M:Techila.Management.PS.Helpers.deserializeMatrixHelper(System.IO.BinaryReader,System.Object,System.Type,System.String[],System.Int32[],System.Int32)">
            Helper function for deserializing matrices.
            @param bais BinaryReader
            @param result 
            @param clazz class of matrix cells
            @param fields field names of struct to deserialize
            @return
            @
        </member>
        <member name="T:Techila.Management.PS.MultipleInputs`1">
             <summary>
             Wrapper for giving multiple input values for a single argument.
             Creates as many computational jobs as the number of items.
            
             If more than one MultipleInputs are used, they each need to have
             the same number of items.
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="M:Techila.Management.PS.MultipleInputs`1.#ctor">
            <summary>
            Empty MultipleInputs for adding items later.
            </summary>
        </member>
        <member name="M:Techila.Management.PS.MultipleInputs`1.#ctor(`0[])">
            <summary>
            MultipleInputs with given number of items.
            </summary>
            <param name="inputs">the argument items</param>
        </member>
        <member name="M:Techila.Management.PS.MultipleInputs`1.add(`0)">
            <summary>
            Add item to existing MultipleInputs.
            </summary>
            <param name="input">item</param>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.PS.MultipleInputs`1.addAll(`0[])">
            <summary>
            Add all items of given array to existing MultipleInputs.
            </summary>
            <param name="inputs">items</param>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.PS.MultipleInputs`1.addAll(System.Collections.Generic.List{`0})">
            <summary>
            Add all items of given list to existing MultipleInputs.
            </summary>
            <param name="inputs">items</param>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.PS.MultipleInputs`1.size">
            <summary>
            Number of items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Techila.Management.PS.MultipleOutputs`1">
            <summary>
            Wrapper for returning multiple outputs.
            Used together with MultipleInputs.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Techila.Management.PS.MultipleOutputs`1.handle(`0)">
            <summary>
            Callback method. Override this.
            </summary>
            <param name="result">Result from a single job</param>
        </member>
        <member name="M:Techila.Management.PS.MultipleOutputs`1.getAll">
            <summary>
            Get all result items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.PS.MultipleOutputs`1.get(System.Int32)">
            <summary>
            Get result item with index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.PS.MultipleOutputs`1.size">
            <summary>
            Get number of result items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.PS.MultipleOutputs`1.ToArray">
            <summary>
            Get result items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.PS.MultipleOutputs`1.ToObjectArray">
            <summary>
            Get result items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Techila.Management.PS.Struct">
            <summary>
            Base class for creating own Structures.
            </summary>
        </member>
        <member name="M:Techila.Management.PS.TechilaProxy`1.register(Techila.Management.TechilaManager,System.String)">
            <summary>
            Register application with given interface.
            </summary>
            <param name="tm">TechilaManager</param>
            <param name="service">The application bundle name in Techila environment</param>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.PS.TechilaProxy`1.register(Techila.Management.TechilaManager,System.String,Techila.Management.PS.Control)">
            <summary>
            Register application with given interface.
            </summary>
            <param name="tm">TechilaManager</param>
            <param name="service">The application bundle name in Techila environment</param>
            <param name="execControl">Control object</param>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.PS.TechilaProxy`1.call(System.String,System.Type,System.Object[])">
            <summary>
            Call dynamically an application method.
            </summary>
            <param name="methodName">the name of the method</param>
            <param name="resultType">the class describing the results</param>
            <param name="inputArgs">the method input arguments</param>
            <returns>method result</returns>
        </member>
        <member name="M:Techila.Management.PS.TechilaProxy`1.call(System.String,System.Type,System.Type,System.Object[])">
            <summary>
            Call dynamically an application method.
            </summary>
            <param name="methodName">the name of the method</param>
            <param name="resultType">the class describing the results</param>
            <param name="inputArgs">the method input arguments</param>
            <param name="innerResultType">If the resultType is MultipleOutputs, this is used to describe the inner result type.</param>
            <returns>method result</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Techila.Management.PS.TechilaProxy`1.call(System.String,System.Type,Techila.Management.PS.Control,System.Object[])" -->
        <member name="M:Techila.Management.PS.TechilaProxy`1.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Invokes the proxy method. This is not called directly.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:Techila.Management.ReportManager">
            <summary>
            Report Manager interface.
            </summary>
        </member>
        <member name="P:Techila.Management.ReportManager.ReportQueries">
            <summary>
            List available reports.
            </summary>
        </member>
        <member name="M:Techila.Management.ReportManager.AddReportQuery(System.String,System.String)">
            <summary>
            Add a report query.
            </summary>
            <param name="query">The SQL query</param>
            <param name="description">description</param>
        </member>
        <member name="M:Techila.Management.ReportManager.SetReportQuery(System.Int32,System.String,System.String)">
            <summary>
            Modify a pre-existing report.
            </summary>
            <param name="id">The report to modify.</param>
            <param name="query">the new SQL query</param>
            <param name="description">description</param>
        </member>
        <member name="M:Techila.Management.ReportManager.RemoveReportQuery(System.Int32)">
            <summary>
            Remove a report query.
            </summary>
            <param name="id">The report to remove.</param>
        </member>
        <member name="M:Techila.Management.ReportManager.ExecuteReportQuery(System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,System.Boolean,System.String)">
            <summary>
            Execute a report query.
            </summary>
            <param name="id">Id of the report to execute</param>
            <param name="pparams">possible parameters for the report</param>
            <param name="headers">Print headers of the report</param>
            <param name="xml">Output XML</param>
            <param name="separator">separator character for non-XML reports</param>
            <returns>the report as a string</returns>
        </member>
        <member name="T:Techila.Management.ResultManager">
            <summary>
            Methods for project result management, like downloading and unzipping.
            </summary>
        </member>
        <member name="M:Techila.Management.ResultManager.SetStreamResults(Techila.Management.Handle,System.Boolean)">
            <summary>Set or unset the stream results bit. If true results are downloaded
            as a stream. When a jobs completed its result file is downloaded
            at the next poll. Separate downloadResult call is not necessary.</summary>
            <see cref="M:Techila.Management.ResultManager.GetNewStreamedResultFiles(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <param name="streamResults">streamResults</param>
        </member>
        <member name="M:Techila.Management.ResultManager.SetUseIntermediateResults(Techila.Management.Handle,System.Boolean)">
            <summary>Set or unset the intermediate results bit. If true the intermediate
            results are downloaded from the project.</summary>
            <see cref="M:Techila.Management.ResultManager.GetNewIntermediateResultFiles(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <param name="useIntermediateResults">useIntermediateResults</param>
        </member>
        <member name="M:Techila.Management.ResultManager.DownloadResult(Techila.Management.Handle)">
            <summary>Download result of the project associated with the handle. The
            result file is downloaded into the download directory. Use
            <see cref="M:Techila.Management.ResultManager.GetResultFile(Techila.Management.Handle)"/> to retrieve the filename of the
            downloaded result file.
            Do now use downloadResult if streaming mode is set to download
            in the background.</summary>
            <example>
            <code>
            ResultManager result = techila.resultManager();
            int statuscode = result.downloadResult(handle);
            </code>
            </example>
            <see cref="M:Techila.Management.ResultManager.DownloadResult(Techila.Management.Handle,System.Boolean)"/>
            <see cref="M:Techila.Management.ResultManager.SetDownloadDir(Techila.Management.Handle,System.String)"/>
            <see cref="M:Techila.Management.ResultManager.GetResultFile(Techila.Management.Handle)"/>
            <see cref="M:Techila.Management.ResultManager.Unzip(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.DownloadResult(Techila.Management.Handle,System.Boolean)">
            <summary>Download result of the project associated with the handle.</summary>
            <see cref="M:Techila.Management.ResultManager.DownloadResult(Techila.Management.Handle)"/>
            <see cref="M:Techila.Management.ResultManager.SetDownloadDir(Techila.Management.Handle,System.String)"/>
            <param name="handle">handle</param>
            <param name="allowPartial">allow partial result</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.DownloadResult(Techila.Management.Handle,System.Boolean,System.Boolean)">
            <summary>Download result of the project associated with the handle.</summary>
            <see cref="M:Techila.Management.ResultManager.DownloadResult(Techila.Management.Handle)"/>
            <see cref="M:Techila.Management.ResultManager.SetDownloadDir(Techila.Management.Handle,System.String)"/>
            <param name="handle">handle</param>
            <param name="allowPartial">allow partial result</param>
            <param name="stream">stream the results</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.GetResultFile(Techila.Management.Handle)">
            <summary>Get the project result file.</summary>
            <see cref="M:Techila.Management.ResultManager.DownloadResult(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <returns>full path and filename to the downloaded result or null if the</returns>
            result has not yet been downloaded.
        </member>
        <member name="M:Techila.Management.ResultManager.Unzip(Techila.Management.Handle)">
            <summary>Unzip the project zip file associated with the handle. The files
            are unzipped into the unzip directory. Use
            <see cref="M:Techila.Management.ResultManager.GetResultDirectory(Techila.Management.Handle)"/> and/or <see cref="M:Techila.Management.ResultManager.GetResultFiles(Techila.Management.Handle)"/>
            to get the information.</summary>
            <see cref="M:Techila.Management.ResultManager.DownloadResult(Techila.Management.Handle)"/>
            <see cref="M:Techila.Management.ResultManager.GetResultFiles(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.GetResultDirectory(Techila.Management.Handle)">
            <summary>Get the directory where results have been unzipped.</summary>
            <see cref="M:Techila.Management.ResultManager.Unzip(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <returns>the path to the unzipping directory or null if the project has
            not yet been unzipped.</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.GetResultFiles(Techila.Management.Handle)">
            <summary>Get the unzipped result filenames.</summary>
            <see cref="M:Techila.Management.ResultManager.Unzip(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <returns>array of Strings or null if no files have been unzipped</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.GetNewStreamedResultFiles(Techila.Management.Handle)">
            <summary>Get the new files retrieved in streaming mode. The files will be
            listed only once each.</summary>
            <param name="handle">handle</param>
            <returns>array of filenames (with paths) or null</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.GetStreamedResultFiles(Techila.Management.Handle)">
            <summary>Get the files retrieved in streaming mode.</summary>
            <param name="handle">handle</param>
            <returns>array of filenames (with paths) or null</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.GetNewIntermediateResultFiles(Techila.Management.Handle)">
            <summary>Get the intermediate result files.</summary>
            <param name="handle">handle</param>
            <returns>array of filenames (with paths) or null</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.GetNewIntermediateResultFileNames(Techila.Management.Handle)">
            <summary>Get the intermediate result filenames on the server.</summary>
            <param name="handle">handle</param>
            <returns>array of filenames (with paths) or null</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.GetStreamedResultFileName(Techila.Management.Handle,System.Int32)">
            <summary>Get the streamed result file in specific index.</summary>
            <param name="handle">handle</param>
            <param name="index">the index of the file</param>
            <returns>name of the file</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.GetStreamedResultFilesCount(Techila.Management.Handle)">
            <summary>Get the count of streamed result files.</summary>
            <param name="handle">handle</param>
            <returns>the count of streamed files</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.GetResultFileName(Techila.Management.Handle,System.Int32)">
            <summary>Get the unzipped result file in specific index.</summary>
            <see cref="M:Techila.Management.ResultManager.Unzip(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <param name="index">the index of the file in zip</param>
            <returns>name of the file</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.GetResultFileCount(Techila.Management.Handle)">
            <summary>Get the count of unzipped result files.</summary>
            <see cref="M:Techila.Management.ResultManager.Unzip(Techila.Management.Handle)"/>
            <param name="handle">handle</param>
            <returns>the count of unzipped files</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.SetDownloadDir(Techila.Management.Handle,System.String)">
            <summary>Set the download directory for the associated handle.</summary>
            <param name="handle">handle</param>
            <param name="directory">directory</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.SetUnzipDir(Techila.Management.Handle,System.String)">
            <summary>Set the unzip directory for the associated handle. When the unzip()
            is called the files will be generated in to the specified directory.</summary>
            <param name="handle">handle</param>
            <param name="directory">directory</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.SetResultFile(Techila.Management.Handle,System.String)">
            <summary>Set the result file to point somewhere.</summary>
            <param name="handle">handle</param>
            <param name="file">file</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.ResultManager.GetFilesReceived(Techila.Management.Handle)">
            <summary>Return the number of files received using stream.</summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.ResultManager.SetFilesReceived(Techila.Management.Handle,System.Int32)">
            <summary>Do NOT use unless you know what you are doing!</summary>
        </member>
        <member name="M:Techila.Management.ResultManager.SetAllowPartial(Techila.Management.Handle,System.Boolean)">
            <summary>Set allow partial flag.</summary>
        </member>
        <member name="T:Techila.Management.SecurityManager">
            <summary>
            Security Manager.
            </summary>
        </member>
        <member name="F:Techila.Management.SecurityManager.key">
            <summary>
            User private key.
            </summary>
        </member>
        <member name="F:Techila.Management.SecurityManager.cert">
            <summary>
            User certificate.
            </summary>
        </member>
        <member name="F:Techila.Management.SecurityManager.store">
            <summary>
            Cert Store.
            </summary>
        </member>
        <member name="F:Techila.Management.SecurityManager.certpath">
            <summary>
            Cert Path.
            </summary>
        </member>
        <member name="F:Techila.Management.SecurityManager.alias">
            <summary>
            Alias of the key/certificate in the keystore.
            </summary>
        </member>
        <member name="F:Techila.Management.SecurityManager.keystore">
            <summary>
            Filename of the keystore.
            </summary>
        </member>
        <member name="F:Techila.Management.SecurityManager.password">
            <summary>
            Password for the keystore.
            </summary>
        </member>
        <member name="P:Techila.Management.SecurityManager.Key">
            <summary>
            Get the private key.
            </summary>
            <returns>the user PrivateKey</returns>
        </member>
        <member name="P:Techila.Management.SecurityManager.Cert">
            <summary>
            Get the certificate.
            </summary>
            <returns>the user certificate</returns>
        </member>
        <member name="P:Techila.Management.SecurityManager.Cert2">
            <summary>
            Get the certificate.
            </summary>
            <returns>the user certificate</returns>
        </member>
        <member name="P:Techila.Management.SecurityManager.CertStore">
            <summary>
            Get the Cert Store.
            </summary>
            <returns>the user CertStore</returns>
        </member>
        <member name="P:Techila.Management.SecurityManager.CertPath">
            <summary>
            Get the Certificate Path.
            </summary>
            <returns>the certificate path</returns>
        </member>
        <member name="M:Techila.Management.SecurityManager.GetCertChain">
            <summary>
            Get the Certificate Chain.
            </summary>
            <returns>the certificate chain</returns>
        </member>
        <member name="M:Techila.Management.SecurityManager.GetCerts2">
            <summary>
            Get Certificates.
            </summary>
            <returns>the certificates</returns>
        </member>
        <member name="P:Techila.Management.SecurityManager.Alias">
            <summary>
            Get the alias.
            </summary>
            <returns>the alias string</returns>
        </member>
        <member name="P:Techila.Management.SecurityManager.Keystore">
            <summary>
            Get the keystore location.
            </summary>
            <returns>the keystore location</returns>
        </member>
        <member name="P:Techila.Management.SecurityManager.Password">
            <summary>
            Get the password.
            </summary>
            <returns>the keystore password</returns>
        </member>
        <member name="M:Techila.Management.SecurityManager.#ctor(System.String,System.String,System.String,Techila.Management.Logger)">
            <summary>
            Instantiate a new SecurityManager.
            </summary>
            <param name="keystore">keystore</param>
            <param name="alias">alias</param>
            <param name="password">password</param>
        </member>
        <member name="M:Techila.Management.SecurityManager.LoadKeystore(Techila.Management.Logger)">
            <summary>
            Load the private key and the certificate from the keystore.
            </summary>
        </member>
        <member name="M:Techila.Management.SecurityManager.MakeSignature(System.String)">
            <summary>
            Make a signature. Sign the given string with private key.
            </summary>
            <param name="str">str</param>
            <returns>Vector of DN of String signing key, byte[] signature, String signing key</returns>
        </member>
        <member name="T:Techila.Management.SemaphoreManager">
            <summary>
            Semaphore Manager interface.
            </summary>
        </member>
        <member name="P:Techila.Management.SemaphoreManager.List">
            <summary>
            List active semaphores.
            </summary>
        </member>
        <member name="M:Techila.Management.SemaphoreManager.Add(System.String,System.Int32,System.Int32)">
            <summary>
            Add a new global semaphore.
            </summary>
            <param name="name">The name of the semaphore</param>
            <param name="size">The count of the semaphore tokens</param>
            <param name="expiration">The expiration time for the tokens</param>
        </member>
        <member name="M:Techila.Management.SemaphoreManager.Remove(System.String)">
            <summary>
            Remove a global semaphore.
            </summary>
            <param name="name">The name of the semaphore</param>
        </member>
        <member name="T:Techila.Management.ServerManager">
            <summary>
            Server Manager Interface.
            </summary>
        </member>
        <member name="M:Techila.Management.ServerManager.CloseCommandSession">
            <summary>
            Closes command session to server.
            </summary>
        </member>
        <member name="M:Techila.Management.ServerManager.Command(System.String)">
            <summary>
            Executes a single server command.
            </summary>
            <param name="cmd">cmd</param>
            <returns>response</returns>
        </member>
        <member name="M:Techila.Management.ServerManager.CreateCommandSession">
            <summary>
            Creates a new command session to server.
            </summary>
        </member>
        <member name="M:Techila.Management.ServerManager.ReadFromCommandSession">
            <summary>
            Read a response from command session.
            </summary>
            <returns>response</returns>
        </member>
        <member name="M:Techila.Management.ServerManager.WriteToCommandSession(System.String)">
            <summary>
            Writes a command to the command session.
            </summary>
            <param name="cmd">cmd</param>
        </member>
        <member name="T:Techila.Management.Status">
            <summary>
            Operation Status.
            </summary>
        </member>
        <member name="F:Techila.Management.Status.Code">
            <summary>
            Operation Status Code. 0 = Ok.
            </summary>
        </member>
        <member name="F:Techila.Management.Status.Message">
            <summary>
            Operation Status Message.
            </summary>
        </member>
        <member name="T:Techila.Management.StatusWindow">
            <summary>
            Status Window interface.
            </summary>
        </member>
        <member name="M:Techila.Management.StatusWindow.SetGM(Techila.Management.TechilaManager)">
            <summary>pass TechilaManager instance.</summary>
        </member>
        <member name="M:Techila.Management.StatusWindow.SetConf(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Set configuration.</summary>
            <param name="swconf">swconf</param>
        </member>
        <member name="M:Techila.Management.StatusWindow.Update(Techila.Management.Handle)">
            <summary>Project information has changed.</summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.StatusWindow.ProjectAdded(Techila.Management.Handle)">
            <summary>A project has been added to Poller.</summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.StatusWindow.ProjectRemoved(Techila.Management.Handle)">
            <summary>A project has been removed from Poller.</summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.StatusWindow.Begin">
            <summary>Polling operations have started (Poller is running).</summary>
        </member>
        <member name="M:Techila.Management.StatusWindow.End">
            <summary>Polling operations have ended (Poller stopped).</summary>
        </member>
        <member name="M:Techila.Management.StatusWindow.BeginDownload(Techila.Management.Handle)">
            <summary>Download of project result has begun.</summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.StatusWindow.EndDownload(Techila.Management.Handle)">
            <summary>Download of project result has ended (failed or completed).</summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.StatusWindow.UpdateDownload(Techila.Management.Handle)">
            <summary>Download status has changed.</summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.StatusWindow.BeginUpload(Techila.Management.Handle)">
            <summary>Upload has begun.</summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.StatusWindow.EndUpload(Techila.Management.Handle)">
            <summary>Upload has finished.</summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.StatusWindow.UpdateUpload(Techila.Management.Handle)">
            <summary>Upload status has changed.</summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.StatusWindow.BeginUnzip(Techila.Management.Handle)">
            <summary>Unzip of the project result operation has begun.</summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.StatusWindow.EndUnzip(Techila.Management.Handle)">
            <summary>Unzip of the proejct result has ended (failed or completed.)</summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.StatusWindow.UpdateUnzip(Techila.Management.Handle)">
            <summary>Unzip operation status has changed.</summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:Techila.Management.StatusWindow.Error(Techila.Management.Handle,System.Int64,System.String,System.String,System.Int32)">
            <summary>Project error has occured on some client.</summary>
            <param name="handle">handle</param>
            <param name="jobid">Job id</param>
            <param name="time">timestamp of error</param>
            <param name="msg">error message</param>
            <param name="clientid">client id</param>
        </member>
        <member name="M:Techila.Management.StatusWindow.PollStatus(System.Int32,System.String)">
            <summary>
            Status of the polling.
            </summary>
            <param name="code">code</param>
            <param name="msg">msg</param>
        </member>
        <member name="F:Techila.Management.StatusWindowWrapper.statusWindow">
            <summary>The actual implementing class.</summary>
        </member>
        <member name="M:Techila.Management.StatusWindowWrapper.#ctor(System.String,Techila.Management.TechilaManager,Techila.Management.Logger,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Construct a new StatusWindowWrapper.</summary>
            <param name="swProvider">swProvider</param>
            <param name="log">log</param>
            <param name="gm">gm</param>
            <param name="swconf">swconf</param>
        </member>
        <member name="M:Techila.Management.StatusWindowWrapper.impl">
            <summary>Implementation instantiated.</summary>
        </member>
        <member name="M:Techila.Management.StatusWindowWrapper.statusWindowException(System.Exception)">
            <summary>Log an exception from the StatusWindow implementation.</summary>
            <param name="t">t</param>
        </member>
        <member name="T:Techila.Management.Support">
            <summary>
            Support interface contains status codes and their explanations.
            </summary>
        </member>
        <member name="F:Techila.Management.Support.Ok">
            <summary>Support.OK.</summary>
        </member>
        <member name="F:Techila.Management.Support.Error">
            <summary>General error.</summary>
        </member>
        <member name="F:Techila.Management.Support.NoInit">
            <summary>library is not initialized properly.</summary>
        </member>
        <member name="F:Techila.Management.Support.HandleNotFound">
            <summary>Handle not found. Use open to get handle.</summary>
        </member>
        <member name="F:Techila.Management.Support.ConnectionFailed">
            <summary>Connection to the server failed.</summary>
        </member>
        <member name="F:Techila.Management.Support.UnknownHost">
            <summary>The specified server is unknown.</summary>
        </member>
        <member name="F:Techila.Management.Support.InitFileNotFound">
            <summary>Init config file not found.</summary>
        </member>
        <member name="F:Techila.Management.Support.InitKeystoreFailed">
            <summary>Failed loading keystore in init.</summary>
        </member>
        <member name="F:Techila.Management.Support.InitXmlRpcFailed">
            XML-RPC initialization has failed.
        </member>
        <member name="F:Techila.Management.Support.InitNoTempDir">
            <summary>Temporary directory does not exist and/or creation failed.</summary>
        </member>
        <member name="F:Techila.Management.Support.InitAccessFailed">
            <summary>Access to the server has failed.</summary>
        </member>
        <member name="F:Techila.Management.Support.InitNoKeystore">
            <summary>Keystore not defined or not found.</summary>
        </member>
        <member name="F:Techila.Management.Support.InitNoAlias">
            <summary>Keystore alias not defined.</summary>
        </member>
        <member name="F:Techila.Management.Support.InitNoPassword">
            <summary>Keystore password not defined.</summary>
        </member>
        <member name="F:Techila.Management.Support.InitNoHostName">
            <summary>Server hostname not defined.</summary>
        </member>
        <member name="F:Techila.Management.Support.InitNoPort">
            <summary>Server port not defined.</summary>
        </member>
        <member name="F:Techila.Management.Support.InitFileParseFailed">
            <summary>Parsing of configuration file failed.</summary>
        </member>
        <member name="F:Techila.Management.Support.InitKeystoreError">
            <summary>Error with the keystore.</summary>
        </member>
        <member name="F:Techila.Management.Support.InitKeystoreNotFound">
            <summary>Keystore file not found.</summary>
        </member>
        <member name="F:Techila.Management.Support.InitAlreadyInit">
            <summary>Already initialized. (reserved, but not used)</summary>
        </member>
        <member name="F:Techila.Management.Support.InitMacroFail">
            <summary>Macro expansion failed, possibly a circular definition.</summary>
        </member>
        <member name="F:Techila.Management.Support.BundleNotFound">
            <summary>Desired bundle not found on the server.</summary>
        </member>
        <member name="F:Techila.Management.Support.BundleUploadFailed">
            <summary>Failed to upload files for the bundle.</summary>
        </member>
        <member name="F:Techila.Management.Support.BundleCreateFailed">
            <summary>Creation of the bundle failed.</summary>
        </member>
        <member name="F:Techila.Management.Support.BundleNameFetchFailed">
            <summary>Failed to fetch newly created bundle name from the server.</summary>
        </member>
        <member name="F:Techila.Management.Support.ProjectNoBundle">
            <summary>Bundle has not been set.</summary>
        </member>
        <member name="F:Techila.Management.Support.ProjectNoProject">
            <summary>No Project ID set.</summary>
        </member>
        <member name="F:Techila.Management.Support.ProjectCreateFailed">
            <summary>Creation of the project failed.</summary>
        </member>
        <member name="F:Techila.Management.Support.ProjectCreateJobsFailed">
            <summary>Failed to create jobs for the project.</summary>
        </member>
        <member name="F:Techila.Management.Support.ProjectAddUsersFailed">
            <summary>Failed to add user clients to the project.</summary>
        </member>
        <member name="F:Techila.Management.Support.ProjectStartFailed">
            <summary>Failed to start the project.</summary>
        </member>
        <member name="F:Techila.Management.Support.ProjectSetParamsFailed">
            <summary>Failed to set project parameters.</summary>
        </member>
        <member name="F:Techila.Management.Support.ProjectCreateJobFailed">
            <summary>Creation of a job has failed.</summary>
        </member>
        <member name="F:Techila.Management.Support.ProjectNoErrorsDownloaded">
            <summary>Project errors not downloaded when trying to parse (use getErrors).</summary>
        </member>
        <member name="F:Techila.Management.Support.ProjectParseError">
            <summary>Error while trying to parse project errors file.</summary>
        </member>
        <member name="F:Techila.Management.Support.WaitNoProject">
            <summary>No project associated with the handle. Cannot wait.</summary>
        </member>
        <member name="F:Techila.Management.Support.WaitPollFailed">
            <summary>Background poll has failed.</summary>
        </member>
        <member name="F:Techila.Management.Support.DownloadNoProject">
            <summary>No project associated with the handle. Cannot download.</summary>
        </member>
        <member name="F:Techila.Management.Support.DownloadNoDir">
            <summary>No directory set for downloading the result.</summary>
        </member>
        <member name="F:Techila.Management.Support.DownloadFailed">
            <summary>File download from the server has failed.</summary>
        </member>
        <member name="F:Techila.Management.Support.UnzipNoResult">
            <summary>The result zip file was not found. Use download.</summary>
        </member>
        <member name="F:Techila.Management.Support.UnzipError">
            <summary>Unzipping has failed.</summary>
        </member>
        <member name="F:Techila.Management.Support.UploadNoBundle">
            <summary>No bundle has been created, nothing to upload.</summary>
        </member>
        <member name="F:Techila.Management.Support.UploadNoFile">
            <summary>File to be uploaded does not exist.</summary>
        </member>
        <member name="F:Techila.Management.Support.UploadFailed">
            <summary>Upload to the server has failed.</summary>
        </member>
        <member name="F:Techila.Management.Support.ApproveFailed">
            <summary>Approve failed.</summary>
        </member>
        <member name="T:Techila.Management.Support.CleanupMode">
            <summary>
            Cleanup mode.
            </summary>
        </member>
        <member name="F:Techila.Management.Support.CleanupMode.Everything">
            <summary>Deprecated, use All</summary>
        </member>
        <member name="F:Techila.Management.Support.CleanupMode.ResultFile">
            <summary>Cleanup will remove downloaded result file.</summary>
        </member>
        <member name="F:Techila.Management.Support.CleanupMode.UnzipFiles">
            <summary>Cleanup will remove unzipped files.</summary>
        </member>
        <member name="F:Techila.Management.Support.CleanupMode.DownloadDir">
            <summary>Cleanup will remove download directory.</summary>
        </member>
        <member name="F:Techila.Management.Support.CleanupMode.UnzipDir">
            <summary>Cleanup will remove unzip directory.</summary>
        </member>
        <member name="F:Techila.Management.Support.CleanupMode.CreatedBundles">
            <summary>Cleanup will remove created signed bundles.</summary>
        </member>
        <member name="F:Techila.Management.Support.CleanupMode.ErrorFiles">
            <summary>Cleanup will remove downloaded error files.</summary>
        </member>
        <member name="F:Techila.Management.Support.CleanupMode.All">
            <summary>Cleanup mode will remove all.</summary>
        </member>
        <member name="F:Techila.Management.Support.clh">
            <summary>Custom log handler for retrieving last error.</summary>
        </member>
        <member name="F:Techila.Management.Support.fileHandler">
            <summary>File logging handler.</summary>
        </member>
        <member name="F:Techila.Management.Support.consoleHandler">
            <summary>Console logging handler.</summary>
        </member>
        <member name="F:Techila.Management.Support.statusCodeDescs">
            <summary>String descriptions of each status code.</summary>
        </member>
        <member name="M:Techila.Management.Support.#ctor(Techila.Management.Common,Techila.Management.Logger)">
            <summary>
            Construct a new Support instance.
            </summary>
            <param name="common">common</param>
            <param name="log">log</param>
        </member>
        <member name="M:Techila.Management.Support.SetLogLevel(System.String)">
            <summary>
            Set logging level.
            </summary>
            <example>
            <code>
            int statuscode = techila.support().setLogLevel("ALL");
            </code>
            </example>
            <param name="level">String representation of the level</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.Support.DescribeStatusCode(System.Int32)">
            <summary>
            Describe the given status code.
            </summary>
            <param name="statuscode">statuscode</param>
            <returns>Description of the error</returns>
        </member>
        <member name="P:Techila.Management.Support.LastErrorMessage">
            <summary>
            Get the message of the last severe logged event. This method may
            provide more detailed information if an error has happened and
            an error code has been returned by some method. Even more detailed
            info is available in the log file depending on the log level.
            </summary>
            <returns>message</returns>
        </member>
        <member name="M:Techila.Management.Support.AddHandler(Techila.Management.LogHelpers.Handler)">
            <summary>
            Add a logging handler into the Management Library logger.
            </summary>
            <param name="handler">the handler to be added</param>
        </member>
        <member name="M:Techila.Management.Support.RemoveHandler(Techila.Management.LogHelpers.Handler)">
            <summary>
            Remove a logging handler from the logger.
            </summary>
            <param name="handler">the handler to be removed</param>
        </member>
        <member name="M:Techila.Management.Support.Log(System.String)">
            <summary>
            Log a message into the log (with level INFO).
            </summary>
            <param name="msg">msg</param>
        </member>
        <member name="M:Techila.Management.Support.Log(System.String,System.String)">
            <summary>
            Log a message into the log with given level.
            </summary>
            <param name="level">level</param>
            <param name="msg">msg</param>
        </member>
        <member name="M:Techila.Management.Support.Log(Techila.Management.LogHelpers.Level,System.String)">
            <summary>
            Log a message into the log with given level.
            </summary>
            <param name="level">level</param>
            <param name="msg">msg</param>
        </member>
        <member name="M:Techila.Management.Support.InitLog(System.String,System.Int32,System.Int32,Techila.Management.LogHelpers.Level,Techila.Management.LogHelpers.Level)">
            <summary>Initialize logging. Sets up the console and file handlers.</summary>
        </member>
        <member name="M:Techila.Management.Support.RemoveLoggers">
            <summary>Remove the logger handlers (file and console).</summary>
        </member>
        <member name="M:Techila.Management.Support.Dispose(System.Boolean)">
            <summary>
            Dispose support without calling GC.SuppressFinalize
            </summary>
            <param name="managed">ignored</param>
        </member>
        <member name="M:Techila.Management.Support.Dispose">
            <summary>
            Dispose support and call GC.SuppressFinalize
            </summary>
        </member>
        <member name="T:Techila.Management.TechilaConn">
            <summary>
            Functionality for Techila Interconnection.
            </summary>
        </member>
        <member name="P:Techila.Management.TechilaConn.Debug">
            <summary>
            Debug logging.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaConn.#ctor(Techila.Management.TechilaThread)">
            <summary>
            Initialize Techila Interconnection for this TechilaThread.
            </summary>
            <param name="tt">TechilaThread</param>
        </member>
        <member name="M:Techila.Management.TechilaConn.#ctor">
            <summary>
            Initialize Techila Interconnection.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaConn.ReceiveDataFromJob``1(System.Int32,System.String)">
            <summary>
            Receive Data from given Job (TechilaThread). The sending Job (TechilaThread) must call SendDataToJob.
            </summary>
            <typeparam name="T">Type of Data to Receive</typeparam>
            <param name="jobid">The id of the Sending Job (TechilaThread)</param>
            <returns>The Data from the other Job (TechilaThread)</returns>
        </member>
        <member name="M:Techila.Management.TechilaConn.SendDataToJob``1(System.Int32,``0,System.String)">
            <summary>
            Send Data to the given Job (TechilaThread). The receiving Job (TechilaThread) must call ReceiveDataFromJob.
            </summary>
            <typeparam name="T">Type of Data to Send</typeparam>
            <param name="jobid">The id of the Receiving Job (TechilaThread)</param>
            <param name="data">The Data to be sent to the other Job (TechilaThread)</param>
        </member>
        <member name="M:Techila.Management.TechilaConn.WaitForOthers">
            <summary>
            Synchronize Jobs. Waits until all the Jobs call WaitForOthers.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaConn.CloudBc``1(System.Int32,``0)">
            <summary>
            Broadcasts Data from given Job (TechilaThread) to all the other Jobs (TechilaThreads) in the TechilaProject.
            </summary>
            <typeparam name="T">Type of Data to broadcast</typeparam>
            <param name="jobid">The id of the Job (TechilaThread) to broadcast Data from</param>
            <param name="data">The Data to broadcast</param>
            <returns>The broadcasted Data</returns>
        </member>
        <member name="M:Techila.Management.TechilaConn.SynchronizeDataFromJob``1(System.Int32,``0,System.String)">
            <summary>
            <see cref="M:Techila.Management.TechilaConn.CloudBc``1(System.Int32,``0)"/>
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaConn.CloudSum``1(``0,System.Int32,System.String)">
            <summary>
            Computes Sum of the Data from all the Jobs (TechilaThreads)
            </summary>
            <typeparam name="T">Type of Data to summarize</typeparam>
            <param name="data">The Data to summarize</param>
            <param name="target">Optionally the id of the target Job (TechilaThread) for the summarized Data</param>
            <returns>The summarized Data</returns>
        </member>
        <member name="M:Techila.Management.TechilaConn.BinaryTreeSum``1(``0,System.Int32,System.String)">
            <summary>
            <see cref="M:Techila.Management.TechilaConn.CloudSum``1(``0,System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaConn.CloudCat``1(``0,System.Int32,System.String)">
            <summary>
            Concatenate the Data from all the Jobs (TechilaThreads)
            </summary>
            <typeparam name="T">Type of Data to concatenate</typeparam>
            <param name="data">The Data to concatenate</param>
            <param name="target">Optionally the id of the target Job (TechilaThread) for the concatenated Data</param>
            <returns>The concatenated Data</returns>
        </member>
        <member name="M:Techila.Management.TechilaConn.BinaryTreeCat``1(``0,System.Int32,System.String)">
            <summary>
            <see cref="M:Techila.Management.TechilaConn.CloudCat``1(``0,System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaConn.CloudOp``1(System.Func{``0,``0,``0},``0,System.Int32,System.String)">
            <summary>
            Execute given operation across all the Jobs (TechilaThreads)
            </summary>
            <typeparam name="T">Type of Data</typeparam>
            <param name="func">Operation to execute for the Data</param>
            <param name="data">Data from the Jobs (TechilaThreads)</param>
            <param name="target">Optionally the id of the target Job (TechilaThread) for the result Data</param>
            <returns>The result Data</returns>
        </member>
        <member name="M:Techila.Management.TechilaConn.BinaryTreeOperation``1(System.Func{``0,``0,``0},``0,System.Int32,System.String)">
            <summary>
            <see cref="M:Techila.Management.TechilaConn.CloudOp``1(System.Func{``0,``0,``0},``0,System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaConn.GetJobCount(System.String)">
            <summary>
            Get the number of TechilaThreads in this TechilaProject or subgroup.
            </summary>
            <returns>The number of TechilaThreads</returns>
        </member>
        <member name="M:Techila.Management.TechilaConn.GetJobId(System.String)">
            <summary>
            Get the id of TechilaThreads in this TechilaProject or subgroup.
            </summary>
            <returns>The number of TechilaThreads</returns>
        </member>
        <member name="M:Techila.Management.TechilaConn.ExecuteCmd(System.String)">
            <summary>
            Execute given command.
            </summary>
            <param name="cmd">the command string</param>
            <returns>the result of the command</returns>
        </member>
        <member name="M:Techila.Management.TechilaConn.SetProjectParameter(System.String,System.String,System.Int32)">
            <summary>
            Define new or change existing Project Parameter to be used after this call in Techila Server.
            </summary>
            <param name="param">The name of the parameter</param>
            <param name="value">The value for the parameter</param>
            <param name="projectId">The id of the project. Default is current project.</param>
        </member>
        <member name="M:Techila.Management.TechilaConn.GetProjectParameter(System.String,System.Int32)">
            <summary>
            Get value of Project Parameter from Techila Server.
            </summary>
            <param name="param">The name of the parameter</param>
            <param name="projectId">The id of the project. Default is current project.</param>
        </member>
        <member name="M:Techila.Management.TechilaConn.GetProjectJobCounts(System.Int32)">
            <summary>
            Get Project job counts from Techila Server.
            </summary>
            <param name="projectId">The id of the project. Default is current project.</param>
        </member>
        <member name="M:Techila.Management.TechilaConn.GetActiveJobs(System.Int32)">
            <summary>
            Get ids of active Project jobs.
            </summary>
            <param name="projectId">The id of the project. Default is current project.</param>
        </member>
        <member name="M:Techila.Management.TechilaConn.GetActiveProjects">
            <summary>
            Get ids of active Projects of the same owner.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaConn.InitInterconnection(System.Int32)">
            <summary>
            Initializes Techila Interconnection. Synchronizes all the TechilaThreads of TechilaProject.
            </summary>
            <param name="timeout">Timeout for the synchronization. Default is 30 seconds.</param>
        </member>
        <member name="T:Techila.Management.TechilaData">
            <summary>
            Functionality for handling User Data in Techila Projects.
            </summary>
        </member>
        <member name="P:Techila.Management.TechilaData.Debug">
            <summary>
            Debug logging.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaData.SetUserData(System.String,System.String)">
            <summary>
            Stores user data value for current worker node. The value can be fetched later with GetUserData. Empty value removes the stored user data.
            </summary>
            <param name="param">User data key</param>
            <param name="value">User data value</param>
        </member>
        <member name="M:Techila.Management.TechilaData.GetUserData(System.String)">
            <summary>
            Returns the previously stored user data value. Parameter values have to be stored with SetUserData on the same worker nodes.
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Techila.Management.TechilaData.StoreUserfile(System.String,System.String)">
            <summary>
            Stores file permanently at current worker node. The file can be fetched later with RestoreUserFile.
            </summary>
            <param name="key"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.TechilaData.RestoreUserfile(System.String,System.String)">
            <summary>
            Restore previously stored file at current worker node.
            </summary>
            <param name="key"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.TechilaData.RemoveUserfile(System.String)">
            <summary>
            Remove previously stored file at current worker node.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.TechilaData.UploadToURL(System.String,System.String)">
            <summary>
            Uploads the file to the URL.
            </summary>
            <param name="url"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.TechilaData.DownloadFromURL(System.String,System.String)">
            <summary>
            Downloads the file from the URL.
            </summary>
            <param name="url"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:Techila.Management.TechilaException">
            <summary>
            Exception class. Holds the error code.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaException.#ctor(System.Int32,System.String)">
            <summary>
            Create TechilaException with errorcode and message.
            </summary>
            <param name="errorCode">the errorcode</param>
            <param name="msg">the error message</param>
        </member>
        <member name="M:Techila.Management.TechilaException.#ctor(System.Int32,System.Exception)">
            <summary>
            Create TechilaException with errorcode and Exception.
            </summary>
            <param name="errorCode">the errorcode</param>
            <param name="e">the exception</param>
        </member>
        <member name="P:Techila.Management.TechilaException.ErrorCode">
            <summary>
            Get the error code from the TechilaException.
            </summary>
            <returns>the errorcode</returns>
        </member>
        <member name="M:Techila.Management.TechilaException.ToString">
            <summary>
            String presentation of TechilaException.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Techila.Management.TechilaImpersonate">
            <summary>
            Impersonation for TechilaThreads.
            </summary>
            <seealso cref="F:Techila.Management.TechilaThread.ImpersonateThread"/>
        </member>
        <member name="M:Techila.Management.TechilaImpersonate.#ctor(Techila.Management.TechilaThread)">
            <summary>
            Starts the impersonated part for TechilaThread. Call this in TechilaThreads Execute().
            </summary>
            <example><code>
            using (new TechilaImpersonate(this))
            {
               access database
            }
            </code></example>
            <param name="tt">TechilaThread</param>
        </member>
        <member name="M:Techila.Management.TechilaImpersonate.Dispose">
            <summary>
            Reverts impersonation.
            </summary>
        </member>
        <member name="T:Techila.Management.TechilaIntermediateData">
            <summary>
            Intermediate data to be transferred from the TechilaThread to End-User and back to the TechilaThread.
            </summary>
        </member>
        <member name="P:Techila.Management.TechilaIntermediateData.ThreadIndex">
            <summary>
            The index of TechilaThread in TechilaProject.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaIntermediateData.Write">
            <summary>
            Send TechilaIntermediateData from TechilaThread to End-User.
            Waits if the previous intermediate data still exists.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaIntermediateData.Write(System.Boolean)">
            <summary>
            Send TechilaIntermediateData from TechilaThread to End-User.
            Optionally (wait=False) ignores existing previous intermediate data and overwrites it.
            </summary>
            <param name="wait">Wait if the previous intermediate data exists</param>
        </member>
        <member name="M:Techila.Management.TechilaIntermediateData.Read">
            <summary>
            Reads new intermediate data (sent by End-User) on TechilaThread.
            Waits until data is available.
            </summary>
            <returns>Imported TechilaIntermediateData</returns>
        </member>
        <member name="M:Techila.Management.TechilaIntermediateData.Read(System.Boolean)">
            <summary>
            Reads new intermediate data (sent by End-User) on TechilaThread.
            Optionally return without data if it does not exist yet. Otherwise waits for data.
            </summary>
            <param name="wait">Wait for data if it does not exist yet.</param>
            <returns>Imported TechilaIntermediateData. Null if wait=False and the data does not exist.</returns>
        </member>
        <member name="T:Techila.Management.TechilaManager">
            <summary>
            The main Techila Manager interface.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaManager.BundleManager">
            <summary>
            Get an instance of a BundleManager.
            </summary>
            <returns>BundleManager</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.ProjectManager">
            <summary>
            Get an instance of a ProjectManager.
            </summary>
            <returns>ProjectManager</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.ResultManager">
            <summary>
            Get an instance of a ResultManager.
            </summary>
            <returns>ResultManager</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.Support">
            <summary>
            Get an instance of a Support class.
            </summary>
            <returns>Support</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.UserManager">
            <summary>
            Get an instance of a UserManager.
            </summary>
            <returns>UserManager</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.WorkerManager">
            <summary>
            Get an instance of a WorkerManager.
            </summary>
            <returns>WorkerManager</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.ServerManager">
            <summary>
            Get an instance of a ServerManager.
            </summary>
            <returns>ServerManager</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.ReportManager">
            <summary>
            Get an instance of a ReportManager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.SemaphoreManager">
            <summary>
            Get an instance of a SemaphoreManager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.Init(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,System.Boolean)">
            <summary>
            Initialize interface library. This method will create the temporary
            directory if required. It will also read the given keystore for
            user private key and certificate and initialize a communication
            session to the server.
            <see cref="M:Techila.Management.TechilaManager.Unload(System.Boolean)"/> method is used to deinitialize the library and
            it must be called even if <see cref="M:Techila.Management.TechilaManager.Init(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,System.Boolean)"/> fails.
            
            </summary>
            <example>
            <code>
            int statuscode = techila.init("keystore.jks", "mykey", "password",
                                          "gridserver.example.com", 25000",
                                          "C:\temp\", "mi.log", 1000000, 3,
                                          Level.ALL, Level.OFF, true, null);
            </code>
            </example>
            <param name="keystore">the filename of the keystore</param>
            <param name="alias">the alias for the key and certificate in the keystore</param>
            <param name="password">the password for the keystore and key</param>
            <param name="hostName">the hostname of the server</param>
            <param name="port">the port number of the server Management Interface</param>
            <param name="tempDir">path to the local temporary directory</param>
            <param name="logFileName">filename of the log file, if null no logging</param>
            <param name="logFileCount">maximum size of log file before rotation</param>
            <param name="logFileSize">maximum number of log files</param>
            <param name="fileLogLevel">File logging level, if null no logging</param>
            <param name="consoleLogLevel">Console logging level, if null no logging</param>
            <param name="errorsToStderr">print project errors to STDERR</param>
            <param name="errorFile">the file where project errors are printed, may be null</param>
            <param name="errorDir">the directory where the project errors are written</param>
            <param name="stdoutFile">the file where project stdouts are printed</param>
            <param name="stdoutDir">the directory where the project stdouts are written</param>
            <param name="stderrFile">the file where project stderrs are printed</param>
            <param name="stderrDir">>the directory where the project stderrs are written</param>
            <param name="pollTime">time between polls (in ms)</param>
            <param name="dlRetryTime">time to wait between download retries (in ms)</param>
            <param name="swconf">StatusWindow config parameters</param>
            <param name="streamMode">streaming mode</param>
            <param name="storePassword">store password in mem</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.Init(Techila.Management.Configuration)">
            <summary>
            Initialize interface library using the given configuration. This
            method will create the temporary directory if required. It will also
            read the given keystore for user private key and certificate and
            initialize a communication session to the server.
            <see cref="M:Techila.Management.TechilaManager.Unload(System.Boolean)"/> method is used to deinitialize the library and
            it must be called even if <see cref="M:Techila.Management.TechilaManager.Init(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,System.Boolean)"/> fails.
            </summary>
            <param name="conf">Configuration object</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.InitFile">
            <summary>
            Initialize interface library and read configuration from the a file.
            The file is searched from multiple locations.
            </summary>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.InitFile(System.String)">
            <summary>
            Initialize interface library and read configuration from the given file.
            </summary>
            <param name="fileName">configuration file</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.InitFile(System.String,System.String)">
            <summary>
            Initialize interface library and read configuration from the given file and
            use given password as the keystore password.
            </summary>
            <param name="fileName">configuration file</param>
            <param name="password">keystore password</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.Unload(System.Boolean)">
            <summary>
            Unload the library and optionally remove the temp directory (which must 
            already be empty = handle cleanups must have been called). Also end the 
            communication session to the server.
            This doesn't actually unload the library from memory!
            </summary>
            <param name="removeTempDir">remove temporary directory</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.Unload(System.Boolean,System.Boolean)">
            <summary>
            Unload the library and optionally remove the temp directory with
            an option to delete it recursively.
            </summary>
            <seealso cref="M:Techila.Management.TechilaManager.Unload(System.Boolean)"/>
            <param name="removeTempDir">remove temporary directory</param>
            <param name="recursive">remote directory recursively</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.StopPoller">
            <summary>
            Stop the poller (mainly for internal use).
            </summary>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.TestSession">
            <summary>
            Test the session (for debugging purposes).
            </summary>
            <returns>status code</returns>
        </member>
        <member name="P:Techila.Management.TechilaManager.KeyNotAfter">
            <summary>
            Get not after date of the validity period of the user key.
            </summary>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.StoreSession(System.IO.Stream)">
            <summary>
            Store the session for later use (contains plain text password, use
            carefully).
            </summary>
            <param name="output">the stream where to write session</param>
            <returns>status code</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.LoadSession(System.IO.Stream,Techila.Management.Configuration)">
            <summary>
            Load a session from a previously stored session into given
            Configuration object.
            </summary>
            <param name="input">the stream containing stored session</param>
            <param name="conf">the configuration object for session</param>
            <returns>status code</returns>
        </member>
        <member name="P:Techila.Management.TechilaManager.UserLogin">
            <summary>
            Get the user login name defined on the server. The value is cached
            after first retrieval.
            </summary>
            <returns>login name</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.Open">
            <summary>
            Open a handle.
            </summary>
            <example><code>
            Handle handle = techila.open();
            </code></example>
            <see cref="M:Techila.Management.Handle.Close"/>
            <returns>Handle</returns>
        </member>
        <member name="P:Techila.Management.TechilaManager.TempDir">
            <summary>
            Get path to temporary directory specific for the current session.
            </summary>
            <returns>full path or null</returns>
        </member>
        <member name="P:Techila.Management.TechilaManager.Initialized">
            <summary>
            Has the Management library been initialized.
            </summary>
            <returns>true if initialized</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.NewPeach(System.String)">
            <summary>
            Get a new Peach object with given name. The object is one time use only.
            </summary>
            <param name="name">The Peach name (funcname etc).</param>
            <returns>the newly created peach object</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.NewPeach(System.String,System.String)">
            <summary>
            Get a new Peach object with given name and given location of state file. The object is one time use only.
            </summary>
            <param name="stateDir">the location of the state file</param>
            <param name="name">The Peach name (funcname etc).</param>
            <returns>the newly created peach object</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.GetServerData(System.String)">
            <summary>
            Get server feature/data value.
            </summary>
            <param name="key">the property to get</param>
            <returns>the value or null</returns>
        </member>
        <member name="P:Techila.Management.TechilaManager.SDKVersion">
            <summary>
            Get the current SDK version (from VERSION file in SDK root).
            </summary>
            <returns>SDK version</returns>
        </member>
        <member name="P:Techila.Management.TechilaManager.ImplVersion">
            <summary>
            Get the Techila Management implementation version.
            </summary>
            <returns>Implementation version</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.GetPlugin(System.String)">
            <summary>
            Get an instance of a plugin manager.
            </summary>
            <param name="className">the name of the plugin class</param>
            <returns>the manager instance</returns>
        </member>
        <member name="P:Techila.Management.TechilaManager.PluginNames">
            <summary>
            Get list of registered plugin names.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaManager.GetPluginClassName(System.String)">
            <summary>
            Get class name of registered plugin.
            </summary>
            <param name="plugin"></param>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.GetPluginConf(System.String)">
            <summary>
            Get the configuration for Plugin.
            </summary>
            <param name="plugin">the name of the plugin</param>
            <returns>the configuration</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.RegisterPlugin(System.String)">
            <summary>
            Register plugin.
            </summary>
            <param name="className">the name of the class or .dll</param>
            <returns>the name of the plugin</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.GetConf(System.String)">
            <summary>
            Get the configuration for Language etc.
            </summary>
            <param name="language">the name of the language</param>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.RegisterPlugin(System.String,System.String)">
            <summary>
            Register plugin with name.
            </summary>
            <param name="className">the name of the class or .dll</param>
            <param name="name">the name of the plugin</param>
            <returns>the name of the plugin</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.SetStatusWindow(Techila.Management.StatusWindow)">
            <summary>
            Set custom status window.
            </summary>
            <param name="sw">the status window object</param>
        </member>
        <member name="M:Techila.Management.TechilaManager.GetStatusWindow">
            <summary>
            Get status window.
            </summary>
            <returns>the status window object</returns>
        </member>
        <member name="M:Techila.Management.TechilaManager.RegisterStatusWindow(Techila.Management.StatusWindow)">
            <summary>
            Register status window.
            </summary>
            <param name="sw">the status window object</param>
        </member>
        <member name="M:Techila.Management.TechilaManager.UnregisterStatusWindow(Techila.Management.StatusWindow)">
            <summary>
            Unregister status window.
            </summary>
            <param name="sw">the status window object</param>
        </member>
        <member name="M:Techila.Management.TechilaManager.GetConfiguration">
            <summary>
            Get current configuration.
            </summary>
            <returns>the configuration</returns>
        </member>
        <member name="T:Techila.Management.TechilaManagerFactory">
            <summary>
            Factory for creating a TechilaManager instance.
            </summary>
            <example><code>
            TechilaManager techila = TechilaManagerFactory.TechilaManager;
            </code></example>
        </member>
        <member name="P:Techila.Management.TechilaManagerFactory.TechilaManager">
             <summary>
             Get a new instance of TechilaManager.
             </summary>
             <returns>TechilaManager</returns>
            
        </member>
        <member name="P:Techila.Management.TechilaManagerFactory.Active">
            <summary>Get a list of all active TechilaManager instances.</summary>
            <returns>A clone of the internal list</returns>
        </member>
        <member name="M:Techila.Management.TechilaManagerFactory.UnloadAll(System.Boolean,System.Boolean)">
            <summary>Method for unloading all active TechilaManager instances.</summary>
            <param name="removeTempDir">Remove temporary directory created</param>
            <param name="recursive">recursive remove</param>
        </member>
        <member name="M:Techila.Management.TechilaManagerFactory.Remove(Techila.Management.TechilaManager)">
            <summary>Remove a specific TechilaManager instance from the active list.</summary>
            <param name="gm">gm</param>
        </member>
        <member name="M:Techila.Management.TechilaManagerFactory.FindConffile">
            <summary>Find the techila_settings.ini file from various locations.
            Order: system environment variable TECHILA_SETTINGS_FILE,
            current working directory, user home directory, sdkRoot.</summary>
            <returns>The filename of the settings file or null</returns>
        </member>
        <member name="P:Techila.Management.TechilaManagerFactory.Cleanup">
            <summary>
            Set/get Cleanup.
            </summary>
        </member>
        <member name="F:Techila.Management.TechilaManagerImpl.STOREDPASSWORD_PROPERTY">
            <summary>Property name where the password is stored (if enabled).</summary>
        </member>
        <member name="F:Techila.Management.TechilaManagerImpl.STATUSWINDOW_PROPERTY">
            <summary>Property name of the status window conf.</summary>
        </member>
        <member name="F:Techila.Management.TechilaManagerImpl.bm">
            <summary>BundleManager instance.</summary>
        </member>
        <member name="F:Techila.Management.TechilaManagerImpl.pm">
            <summary>ProjectManager instance.</summary>
        </member>
        <member name="F:Techila.Management.TechilaManagerImpl.rm">
            <summary>ResultManager instance.</summary>
        </member>
        <member name="F:Techila.Management.TechilaManagerImpl.recursiveDeleteOnUnload">
            <summary>Config value for recursive deleting of files on unload.</summary>
        </member>
        <member name="F:Techila.Management.TechilaManagerImpl.login">
            <summary>Cached user login name.</summary>
        </member>
        <member name="F:Techila.Management.TechilaManagerImpl.streamMode">
            <summary>Stream the result files.</summary>
        </member>
        <member name="M:Techila.Management.TechilaManagerImpl.handshake">
            Capability handshake and other information exchange with the server.
            Must not (yet) assume that the server method is in place and usable.
        </member>
        <member name="T:Techila.Management.TechilaProject">
             <summary>TechilaProject</summary>
             <example>
             <code>
             TechilaProject tp = new TechilaProject();
             int jobs = 10;
             for (int i = 0; i &lt; jobs; i++) 
             {
                Test t = new Test(i);
                tp.Add(t);
             }
             tp.Execute();
             for (int i = 0; i &lt; jobs; i++)
             {
                Test t = (Test)tp.Get(i);
                Console.WriteLine("Result=" + t.Result);
             }
            
             [Serializable]
             class Test : TechilaThread
             {
                public int Data;
                public int Result;
                
                public Test(int Data)
                {
                  this.Data = Data;
                }
                
                public override void Execute()
                {
                   Result = Data * Data;
                }
             }   
             </code></example>
        </member>
        <member name="T:Techila.Management.TechilaProject.TechilaThreadCompleted">
            <summary>
            Event Handler for Completed Threads.
            </summary>
            <param name="tt">A completed TechilaThread</param>
        </member>
        <member name="T:Techila.Management.TechilaProject.TechilaIntermediateDataReceived">
            <summary>
            Event Handler for Intermediate Data.
            </summary>
            <param name="tp">TechilaProject</param>
            <param name="tid">Intermediate Data</param>
        </member>
        <member name="T:Techila.Management.TechilaProject.TechilaProjectCompleted">
            <summary>
            Event Handler for Completed Projects.
            </summary>
            <param name="tp">TechilaProject</param>
        </member>
        <member name="T:Techila.Management.TechilaProject.TechilaProjectFailed">
            <summary>
            Event Handler for Failed Projects.
            </summary>
            <param name="tp">TechilaProject</param>
        </member>
        <member name="E:Techila.Management.TechilaProject.ThreadCompleted">
            <summary>
            List of Event Handlers listening for Completed Threads.
            </summary>
        </member>
        <member name="E:Techila.Management.TechilaProject.ProjectCompleted">
            <summary>
            List of Event Handlers listening for Completed Projects.
            </summary>
        </member>
        <member name="E:Techila.Management.TechilaProject.ProjectFailed">
            <summary>
            List of Event Handlers listening for Failed Projects.
            </summary>
        </member>
        <member name="E:Techila.Management.TechilaProject.IntermediateDataReceived">
            <summary>
            List of Event Handlers listening for Intermediate Datas.
            </summary>
        </member>
        <member name="T:Techila.Management.TechilaProject.ExecutionMode">
            <summary>
            Execution Mode
            </summary>
        </member>
        <member name="F:Techila.Management.TechilaProject.ExecutionMode.Attached">
            <summary>
            Attached (default). The Execute method returns after project is completed.
            </summary>
        </member>
        <member name="F:Techila.Management.TechilaProject.ExecutionMode.Detached">
            <summary>
            Detached. Execute method returns immediately. Attach method is used to bind back to the execution.
            </summary>
        </member>
        <member name="F:Techila.Management.TechilaProject.ExecutionMode.Background">
            <summary>
            Background. Execute method returns immediately and the results are handled in background thread.
            </summary>
        </member>
        <member name="F:Techila.Management.TechilaProject.TechilaIntermediateInterval">
            <summary>
            Interval for polling for Intermediate Data. 
            This is obsoleted in the environments having Service Pack 2015-02-12 or later.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaProject.#ctor">
            <summary>
            TechilaProject constructor which searches Techila configuration in the default locations.
            The default project name is "TechilaProject"
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaProject.#ctor(Techila.Management.TechilaManager)">
            <summary>
            TechilaProject constructor which has preconfigured TechilaManager.
            The default project name is "TechilaProject"
            </summary>
            <param name="tm">Preinitialized TechilaManager</param>
        </member>
        <member name="M:Techila.Management.TechilaProject.#ctor(Techila.Management.TechilaManager,System.String)">
            <summary>
            TechilaProject constructor which has preconfigured TechilaManager and configured project name.
            </summary>
            <param name="tm">Preinitialized TechilaManager</param>
            <param name="name">The Project Name</param>
        </member>
        <member name="M:Techila.Management.TechilaProject.#ctor(System.String,System.String)">
            <summary>
            TechilaProject constructor with ini file location and configured project name.
            </summary>
            <param name="initfile">The location of ini file</param>
            <param name="name">The Project Name</param>
        </member>
        <member name="M:Techila.Management.TechilaProject.#ctor(System.String)">
            <summary>
            TechilaProject constructor with ini file location.
            </summary>
            <param name="initfile">The location of ini file</param>
        </member>
        <member name="M:Techila.Management.TechilaProject.Init(System.String,System.String)">
            <summary>
            TechilaProject Initializer ini file location and configured project name.
            </summary>
            <param name="initfile">The location of ini file</param>
            <param name="name">The Project Name</param>
        </member>
        <member name="M:Techila.Management.TechilaProject.AddDependencies(System.String)">
            <summary>
            Additional dependencies (libraries) for the project. These are copied to the remote execution environment.
            </summary>
            <param name="dependencies">Comma separated list of additional dependencies</param>
        </member>
        <member name="M:Techila.Management.TechilaProject.Add(Techila.Management.TechilaThread)">
            <summary>
            Add a TechilaThread to be executed in this project. Each of the TechilaThreads will be executed
            in a separate computation job.
            </summary>
            <param name="tt">TechilaThread instance</param>
        </member>
        <member name="M:Techila.Management.TechilaProject.Get(System.Int32)">
            <summary>
            Get an existing TechilaThread from this project. The TechilaThreads needs to be added into
            the project first with Add. After the project is completed the TechilaThreads contain updated
            instances which may have results included.
            </summary>
            <param name="index">The index of the TechilaThread</param>
            <returns>TechilaThread instance</returns>
        </member>
        <member name="P:Techila.Management.TechilaProject.Count">
            <summary>
            Get count of TechilaThreads in this project.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaProject.GetPeach">
            <summary>
            Returns Peach instance for lower level functionality.
            </summary>
            <returns>Peach instance</returns>
        </member>
        <member name="M:Techila.Management.TechilaProject.GetTechilaManager">
            <summary>
            Returns TechilaManager instance for lower level functionality.
            </summary>
            <returns>TechilaManger instance</returns>
        </member>
        <member name="M:Techila.Management.TechilaProject.CreateSemaphore(System.String)">
            <summary>
            Creates a new project specific semaphore with size 1 and no expiration timeout.
            </summary>
            <param name="name">Name of the semaphore</param>
        </member>
        <member name="M:Techila.Management.TechilaProject.CreateSemaphore(System.String,System.Int32)">
            <summary>
            Creates a new project specific semaphore with given size and no expiration timeout.
            </summary>
            <param name="name">Name of the semaphore</param>
            <param name="size">Number of allowed simultaneous reservations for the semaphore</param>
        </member>
        <member name="M:Techila.Management.TechilaProject.CreateSemaphore(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new project specific semaphore with given size and expiration timeout.
            </summary>
            <param name="name">Name of the semaphore</param>
            <param name="size">Number of allowed simultaneous reservations for the semaphore</param>
            <param name="expiration">Timeout in seconds for releasing semaphore automatically</param>
        </member>
        <member name="M:Techila.Management.TechilaProject.Execute">
            <summary>
            Executes TechilaThreads of this project.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaProject.Execute(Techila.Management.TechilaProject.ExecutionMode)">
            <summary>
            Executes TechilaThreads of this project.
            <param name="mode">Execution mode (attached, detached, background)</param>
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaProject.Attach(System.Int32)">
            <summary>
            Attach to an existing TechilaProject with Project Id.
            </summary>
            <param name="ProjectId">Project Id from started TechilaProject</param>
        </member>
        <member name="M:Techila.Management.TechilaProject.Attach">
            <summary>
            Attach back to this TechilaProject.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaProject.Attach(Techila.Management.Peach)">
            <summary>
            Attach to an existing TechilaProject with existing Peach object.
            </summary>
            <param name="p">Peach object from started TechilaProject</param>
        </member>
        <member name="M:Techila.Management.TechilaProject.AddIntermediateData(Techila.Management.TechilaIntermediateData)">
            <summary>
            Method for sending more data to a TechilaThread in execution. This can be called in
            Event Handlers of Intermediate Datas. 
            
            Note that the information in TechilaIntermediateData received in the Event Handler 
            contains the required information of TechilaThread index. This must be included also
            to the modified/new TechilaIntermediateData.
            
            Also note that SendIntermediateDatas needs to be called after all the required
            AddIntermediateData calls have been done.
            </summary>
            <param name="tid">TechilaIntermediateData to send to the TechilaThread</param>
        </member>
        <member name="M:Techila.Management.TechilaProject.SendIntermediateDatas">
            <summary>
            Send all the new datas created in AddIntermediateData to the corresponding TechilaThreads.
            </summary>
        </member>
        <member name="T:Techila.Management.TechilaSemaphore">
             <summary>TechilaSemaphore</summary>
             <example>
             <code>
             TechilaProject tp = new TechilaProject();
             tp.CreateSemaphore("mySemaphore", 2);
             int jobs = 10;
             for (int i = 0; i &lt; jobs; i++) 
             {
                Test t = new Test(i);
                tp.Add(t);
             }
             tp.Execute();
             for (int i = 0; i &lt; jobs; i++)
             {
                Test t = (Test)tp.Get(i);
                Console.WriteLine("Result=" + t.Result);
             }
            
             [Serializable]
             class Test : TechilaThread
             {
                public int Data;
                public int Result;
                
                public Test(int Data)
                {
                  this.Data = Data;
                }
                
                public override void Execute()
                {
                  ResourceData RData = null;
                  using (new TechilaSemaphore("mySemaphore"))
                  {
                     RData = getDataFromLimitedResource(Data);
                  }
                  Result = executeDemandingComputation(RData);
                }
             }   
             </code></example>
        </member>
        <member name="M:Techila.Management.TechilaSemaphore.#ctor(System.String)">
            <summary>
            Reserves a local (project-specific) Semaphore. Call this in TechilaThreads Execute().
            </summary>
            <example><code>
            using (new TechilaSemaphore("mySemaphore"))
            {
               access limited datasource
            }
            </code></example>
            <param name="name">The name of the Semaphore</param>
        </member>
        <member name="M:Techila.Management.TechilaSemaphore.#ctor(System.String,System.Boolean)">
            <summary>
            Reserves a local (project-specific) or global (project-shared) Semaphore. Call this in TechilaThreads Execute().
            </summary>
            <example><code>
            using (new TechilaSemaphore("globalSemaphore", true))
            {
               access limited datasource
            }
            </code></example>
            <param name="name">The name of the Semaphore</param>
            <param name="global">Is the semaphore local or global</param>
        </member>
        <member name="M:Techila.Management.TechilaSemaphore.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Reserves a local (project-specific) or global (project-shared) Semaphore with optional timeout in seconds. 
            If the Semaphore is not received before timeout exceeds, the operation throws Exception.
            Call this in TechilaThreads Execute().
            </summary>
            <example><code>
            using (new TechilaSemaphore("globalSemaphore", true, 60))
            {
               access limited datasource
            }
            </code></example>
            <param name="name">The name of the Semaphore</param>
            <param name="global">Is the semaphore local or global</param>
            <param name="timeout">Timeout for the semaphore request in seconds</param>
        </member>
        <member name="M:Techila.Management.TechilaSemaphore.#ctor(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Reserves a local (project-specific) or global (project-shared) Semaphore with optional timeout in seconds. 
            If the Semaphore is not received before timeout exceeds, the operation throws Exception or sets success
            status to false depending on the value of ignoreError parameter. The status of the operation can be retrieved
            by calling isOk() and isTimedOut() methods of the object.
            Call this in TechilaThreads Execute().
            </summary>
            <example><code>
            using (TechilaSemaphore ts = new TechilaSemaphore("globalSemaphore", true, 60, true))
            {
               if (ts.isOk()) {
                 access limited datasource
               } else {
                 do something else
               }
            }
            </code></example>
            <param name="name">The name of the Semaphore</param>
            <param name="global">Is the semaphore local or global</param>
            <param name="timeout">Timeout for the semaphore request in seconds</param>
            <param name="ignoreError">Sets status flag for isOk() and isTimedOut() instead of throwing error</param>
        </member>
        <member name="M:Techila.Management.TechilaSemaphore.IsOk">
            <summary>
            Is the semaphore reserved ok.
            </summary>
            <returns>true if the semaphore is valid</returns>
        </member>
        <member name="M:Techila.Management.TechilaSemaphore.IsTimedOut">
            <summary>
            Did the semaphore request time out.
            </summary>
            <returns>true if the semaphore request timed out</returns>
        </member>
        <member name="M:Techila.Management.TechilaSemaphore.Dispose">
            <summary>
            Releases the reserved semaphore.
            </summary>
        </member>
        <member name="T:Techila.Management.TechilaThread">
            <summary>
            Abstract class for TechilaThreads. Use this as base class for your own computation threads.
            Computation will call Execute() for each of the TechilaThreads in a TechilaProject.
            Fields from the local TechilaThread instances will be transferred to the remote execution and
            the modified fields will be returned back to the local instances after the Execute() has
            completed.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaThread.Execute">
            <summary>
            The main code of TechilaThread to be executed in the remote computation.
            </summary>
        </member>
        <member name="P:Techila.Management.TechilaThread.ThreadIndex">
            <summary>
            The index of this TechilaThread in TechilaProject.
            </summary>
        </member>
        <member name="P:Techila.Management.TechilaThread.ThreadCompleted">
            <summary>
            Flag for the completion of this TechilaThread. 
            This will be true on local instances after the results have been returned.
            </summary>
        </member>
        <member name="T:Techila.Management.TechilaThread.ImpersonateType">
            <summary>
            Impersonation type.
            </summary>
        </member>
        <member name="F:Techila.Management.TechilaThread.ImpersonateType.Off">
            <summary>
            No impersonation.
            </summary>
        </member>
        <member name="F:Techila.Management.TechilaThread.ImpersonateType.On">
            <summary>
            Execute() is executed impersonated.
            </summary>
        </member>
        <member name="F:Techila.Management.TechilaThread.ImpersonateType.Partial">
            <summary>
            Impersonated part must be defined by using TechilaImpersonate(this)
            </summary>
            <example>
            <code>
            using (new TechilaImpersonate(this))
            {
               access database
            }
            </code>
            </example>
        </member>
        <member name="F:Techila.Management.TechilaThread.ImpersonateThread">
            <summary>
            Impersonation for this TechilaThread.
            </summary>
            <seealso cref="T:Techila.Management.TechilaImpersonate"/>
        </member>
        <member name="F:Techila.Management.TechilaThread.ImpersonateSPN">
            <summary>
            Service Principal Name for Kerberos Impersonation.
            </summary>
        </member>
        <member name="P:Techila.Management.TechilaThread.IntermediateData">
            <summary>
            Intermediate data for this TechilaThread.
            </summary>
        </member>
        <member name="M:Techila.Management.TechilaThread.TechilaDump(System.String)">
            <summary>
            Dumps the serialization of this TechilaThread into file.
            </summary>
            <param name="TechilaDumpFile">The filename for the dump</param>
            <returns>The filename for the dump, null to use default ("techila_peach_result.dat")</returns>
        </member>
        <member name="M:Techila.Management.TechilaThread.TechilaRestore(System.String)">
            <summary>
            Deserializes TechilaThread from a file.
            </summary>
            <param name="fileName">The filename containing TechilaThread serialization</param>
            <returns>Deserialized TechilaThread</returns>
        </member>
        <member name="M:Techila.Management.TechilaThread.TechilaRestore(System.Boolean,System.String)">
            <summary>
            Deserializes TechilaThread from a file.
            </summary>
            <param name="fileName">The filename containing TechilaThread serialization</param>
            <param name="runOnWorker">True if executed on a Worker</param>
            <returns>Deserialized TechilaThread</returns>
        </member>
        <member name="M:Techila.Management.TechilaThread.GetJobId">
            <summary>
            The Job Id of this TechilaThread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.TechilaThread.ChangeJob(Techila.Management.TechilaThread,System.Boolean)">
            <summary>
            Changes active TechilaThread in a stateful TechilaProject.
            </summary>
            <param name="tt">Completed TechilaThread</param>
            <param name="ReturnOnly">true: Returns result from TechilaThread, but no new TechilaThread is fetched. Returns null.</param>
            <returns>New TechilaThread from another Job or null if no TechilaThread available</returns>
            <exception cref="T:System.TimeoutException">Retrieving new TechilaThread has timed out</exception>
            <exception cref="T:System.InvalidOperationException">Pre-requisites for new TechilaThread has not yet been started</exception>
            <exception cref="T:System.Exception">Pre-requisites for new TechilaThread has been cancelled, or another error in fetching new TechilaThread. See message for details.</exception>
        </member>
        <member name="T:Techila.Management.UserManager">
            <summary>
            User Manager Interface.
            </summary>
        </member>
        <member name="P:Techila.Management.UserManager.Users">
            <summary>Get a list of users.</summary>
        </member>
        <member name="M:Techila.Management.UserManager.GetUserInfo(System.String)">
            <summary>
            Get user properties.
            </summary>
            <param name="login">The login of the user</param>
            <returns>List of user properties</returns>
        </member>
        <member name="P:Techila.Management.UserManager.UserKeys">
            <summary>
            Get user keys.
            </summary>
        </member>
        <member name="M:Techila.Management.UserManager.CreateUser(System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Create a new user account.</summary>
            <param name="login">login</param>
            <param name="name">name</param>
            <param name="password">password</param>
            <param name="expire">expire</param>
            <param name="bundlePermission">bundlePermission</param>
            <param name="projectPermission">projectPermission</param>
            <param name="isGuest">isGuest</param>
            <param name="isAdmin">isAdmin</param>
        </member>
        <member name="M:Techila.Management.UserManager.RemoveUser(System.String)">
            <summary>Remove a user.</summary>
            <param name="login">login</param>
        </member>
        <member name="M:Techila.Management.UserManager.AssignKey(System.String,System.String)">
            <summary>
            Assigns a key to the user.
            </summary>
            <param name="login">login</param>
            <param name="dn">dn</param>
        </member>
        <member name="M:Techila.Management.UserManager.UnAssignKey(System.String,System.String)">
            <summary>
            Unassigns the key from the user.
            </summary>
            <param name="login">login</param>
            <param name="dn">dn</param>
        </member>
        <member name="M:Techila.Management.UserManager.SetKeyTrust(System.String,System.String,System.Boolean)">
            <summary>
            Marks user key as trusted.
            </summary>
            <param name="login">login</param>
            <param name="dn">dn</param>
            <param name="trusted">trusted</param>
        </member>
        <member name="M:Techila.Management.UserManager.AddKey(Org.BouncyCastle.Pkix.PkixCertPath)">
            <summary>
            Send a key to the server.
            </summary>
            <param name="certPath">certPath</param>
        </member>
        <member name="M:Techila.Management.UserManager.AssignWorkerGroup(System.String,System.String)">
            <summary>
            Assign worker group to the user.
            </summary>
            <param name="login">login</param>
            <param name="groupname">groupname</param>
        </member>
        <member name="M:Techila.Management.UserManager.UnAssignWorkerGroup(System.String,System.String)">
            <summary>
            Remove worker group from the user.
            </summary>
            <param name="login">login</param>
            <param name="groupname">groupname</param>
        </member>
        <member name="M:Techila.Management.UserManager.GetGroupUsers(System.String)">
            <summary>
            Get users having access to a worker group.
            </summary>
            <param name="groupname">The name of the worker group</param>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.UserManager.GetUserGroups(System.String)">
            <summary>
            Get worker groups the user have access.
            </summary>
            <param name="login">The login of the user</param>
            <returns></returns>
        </member>
        <member name="M:Techila.Management.UserManager.SetPassword(System.String,System.String)">
            <summary>
            Set user password.
            </summary>
            <param name="login">login</param>
            <param name="password">password</param>
        </member>
        <member name="M:Techila.Management.UserManager.GetFeatures(System.String)">
            <summary>
            Get user features.
            </summary>
            <param name="login">login</param>
            <returns>features</returns>
        </member>
        <member name="M:Techila.Management.UserManager.SetFeature(System.String,System.String,System.String,System.String)">
            <summary>
            Set user feature.
            </summary>
            <param name="login">login</param>
            <param name="feature">feature key</param>
            <param name="value">feature value</param>
            <param name="description">feature description</param>
        </member>
        <member name="M:Techila.Management.UserManager.RemoveFeature(System.String,System.String)">
            <summary>
            Remove user feature.
            </summary>
            <param name="login">login</param>
            <param name="feature">feature key</param>
        </member>
        <member name="M:Techila.Management.UserManager.GetQuotas">
            <summary>
            Get users quotas.
            </summary>
            <returns>quotas</returns>
        </member>
        <member name="M:Techila.Management.UserManager.GetQuotas(System.String)">
            <summary>
            Get user quotas.
            </summary>
            <returns>quotas</returns>
        </member>
        <member name="M:Techila.Management.UserManager.SetQuotas(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set user quotas.
            </summary>
            <param name="login">user</param>
            <param name="daily">daily quota (hours)</param>
            <param name="weekly">weekly quota (hours)</param>
            <param name="monthly">monthly quota (hours)</param>
            <param name="total">total quota (hours)</param>
            <param name="cores">max concurrent jobs</param>
            <param name="terminate">terminate jobs when quota exceeds</param>
        </member>
        <member name="M:Techila.Management.UserManager.ResetQuotas(System.String)">
            <summary>
            Reset the used quotas for the user.
            </summary>
            <param name="login">user</param>
        </member>
        <member name="T:Techila.Management.WorkerManager">
            <summary>
            Worker Manager Interface.
            </summary>
        </member>
        <member name="M:Techila.Management.WorkerManager.StartWorker(System.Int32)">
            <summary>
            Start a worker.
            </summary>
            <param name="workerId">workerId</param>
        </member>
        <member name="M:Techila.Management.WorkerManager.StartWorkers(System.Collections.Generic.List{System.Int32})">
            <summary>
            Start a group of workers.
            </summary>
            <param name="workerIds">workerIds</param>
        </member>
        <member name="M:Techila.Management.WorkerManager.StopWorkers(System.Collections.Generic.List{System.Int32})">
            <summary>
            Stop a group of workers.
            </summary>
            <param name="workerIds">workerIds</param>
        </member>
        <member name="M:Techila.Management.WorkerManager.StopWorker(System.Int32)">
            <summary>
            Stop a worker.
            </summary>
            <param name="workerId">workerId</param>
        </member>
        <member name="M:Techila.Management.WorkerManager.Command(System.Int32,System.String)">
            <summary>
            Send a single command to a worker.
            </summary>
            <param name="workerId">workerId</param>
            <param name="cmd">cmd</param>
            <returns>response</returns>
        </member>
        <member name="M:Techila.Management.WorkerManager.GetWorkers(System.Boolean)">
            <summary>
            Get the list of the workers.
            </summary>
            <param name="onlineOnly">List only online workers</param>
            <value>list of workers</value>
        </member>
        <member name="M:Techila.Management.WorkerManager.GetWorkers">
            <summary>
            Get the list of the workers.
            </summary>
            <value>list of workers</value>
        </member>
        <member name="P:Techila.Management.WorkerManager.Workers">
            <summary>
            Get the list of the workers.
            </summary>
            <value>list of workers</value>
        </member>
        <member name="M:Techila.Management.WorkerManager.AssignPolicyGroup(System.Int32,System.Int32)">
            <summary>
            Assign Policy Group for Worker Group.
            </summary>
            <param name="policyGroupId">The id of the Policy Group</param>
            <param name="workerGroupId">The id of the Worker Group</param>
        </member>
        <member name="P:Techila.Management.WorkerManager.WorkerGroups">
            <summary>
            Get the list of worker groups.
            </summary>
        </member>
        <member name="P:Techila.Management.WorkerManager.PolicyGroups">
            <summary>
            Get the list of policy groups.
            </summary>
        </member>
        <member name="M:Techila.Management.WorkerManager.GetGroupWorkers(System.String)">
            <summary>
            Get a list of workers belonging to a group.
            </summary>
        </member>
    </members>
</doc>
