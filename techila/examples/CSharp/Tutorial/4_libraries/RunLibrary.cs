using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

// Import the Techila library functions.
// Included in Techila SDK 'techila/lib/TechilaManagement.dll'
using Techila.Management;

// Import the ExampleLibrary.dll. Generated by compiling 'ExampleLibrary.cs'.
using ExampleLibrary;


namespace RunLibrary
{
    class RunLibrary
    {
        static void Main()
        {
            // Will be used to define the number of jobs in the Project.
            int jobs = 3;

            // Define type of result variable
            int jobresult;

            // Create TechilaManager instance
            TechilaManager tm = TechilaManagerFactory.TechilaManager;

            // Test the connection to the Techila Server by creating a session.
            // Returns value 0 if session was created successfully.
            int status = tm.InitFile();

            // Create Support instance
            Support sp = tm.Support();

            // Get the status code description.
            string codedesc = sp.DescribeStatusCode(status);

            // Create a TechilaProject instance and link it with the 'tm' object created earlier
            TechilaProject tp = new TechilaProject(tm, "Library Tutorial");

            // Enable messages
            tp.GetPeach().Messages = true;

            // Add 3 instances of the LibraryDist class to the list in 'tp'
            for (int i = 0; i < jobs; i++)
            {
                tp.Add(new LibraryDist(i));
            }

            // Create and start the Project. Execution will continue after all Jobs have been completed.
            // Job results will be stored in the 'tp' object.
            tp.Execute();

            // Retrieve the values returned from the Jobs.
            for (int i = 0; i < jobs; i++)
            {
                // Retrieve one Job result from 'tp'
                jobresult = ((LibraryDist)tp.Get(i)).Result;

                // Display the value generated in the Job
                System.Console.WriteLine("Result of Job {0}: {1}", i + 1, jobresult);

            }

            // Uninitialize and remove the session
            tm.Unload(true);

        }
    }

    // Mark the class as serializable
    [Serializable]
    class LibraryDist : TechilaThread // Extend the TechilaThread class
    {
        int Iteration;

        // Define constructor that takes one input argument
        public LibraryDist(int iteration)
        {
            this.Iteration = iteration;
        }

        // Define 'Result' as public so it can be accessed when Job results are retrieved from the 'tp' list.
        public int Result;

        // Override the 'Execute' method in the 'TechilaThread' class with code that we want to execute.
        public override void Execute()
        {
            // Call the Sum method defined in 'ExampleLibrary.dll'
            Result = SumClass.Sum(Iteration, Iteration);
        }
    }
}
