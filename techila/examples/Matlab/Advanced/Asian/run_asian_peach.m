function run_asian_peach()
% This function shows how to distribute the computationally intensive
% Asian routine by using the 'peach' function.
%
% Usage: run_asian_peach()
global price fig
S0 = linspace(45,47,9); % initial stock price
sigma0 = linspace(0.35,0.4,9);%initial volatility of stock return

%The parameters of stock price diffusion
M = 20000; %The number of trajectories
N = 365; %The number of data points in year
nn=1;    % number of time steps per sample point

%The parameters of volatility diffusion
rho=-0.5; %The correlation between the increments of stock price and volatility
kappa=0.1; %The speed of revision
psi=0.5; %The standard deviation of volatility

%Other parameters
E=70; %Exercise price
T=1; %Maturity time
r = 0.05; % Interest rate

randn('state',0)  % initialize random number generator

%price = zeros(length(sigma0),length(S0));

[l_grid S2_grid] = meshgrid(S0,sigma0);
price = nan(size(l_grid));
figure;
fig = surf(l_grid,S2_grid,price,'ZDataSource','price');
xlabel('Initial stock price'),ylabel('Initial volatility'),zlabel('Price of Asian Call')
title('Plot generated by the distributed version (peach)')
colormap(jet)

jobs=length(S0)*length(sigma0.^2)

peach('asian_function_wrapper',...
    {S0,sigma0.^2,M,nn,r,N,rho,kappa,0.5,E,T '<param>'}, ...
   1:jobs,...
   'StreamResults', 'true',...
   'CallbackMethod',@cbfun);
end


function cbfun(outputfile)
global price fig

load(outputfile,'-mat')
indexi=result{1};
indexj=result{2};
jobprice=result{3};
price(indexj,indexi)=jobprice;
refreshdata(fig, 'caller');
drawnow;


end

